{"version":3,"file":"bundle.min.js","sources":["../../../src/helpers/color-maps.js","../../../src/helpers/image-preprocessor.js","../../../src/helpers/image-mesh-converter.js","../../../src/solver.js","../../../src/main.js"],"sourcesContent":["const jetcmap = [[0.0, 0.0, 0.5], [0.0, 0.0, 0.517825311942959], [0.0, 0.0, 0.535650623885918], [0.0, 0.0, 0.553475935828877], [0.0, 0.0, 0.571301247771836], [0.0, 0.0, 0.589126559714795], [0.0, 0.0, 0.606951871657754], [0.0, 0.0, 0.624777183600713], [0.0, 0.0, 0.642602495543672], [0.0, 0.0, 0.660427807486631], [0.0, 0.0, 0.67825311942959], [0.0, 0.0, 0.696078431372549], [0.0, 0.0, 0.713903743315508], [0.0, 0.0, 0.731729055258467], [0.0, 0.0, 0.749554367201426], [0.0, 0.0, 0.767379679144385], [0.0, 0.0, 0.785204991087344], [0.0, 0.0, 0.803030303030303], [0.0, 0.0, 0.820855614973262], [0.0, 0.0, 0.838680926916221], [0.0, 0.0, 0.85650623885918], [0.0, 0.0, 0.874331550802139], [0.0, 0.0, 0.892156862745098], [0.0, 0.0, 0.909982174688057], [0.0, 0.0, 0.927807486631016], [0.0, 0.0, 0.945632798573975], [0.0, 0.0, 0.963458110516934], [0.0, 0.0, 0.981283422459893], [0.0, 0.0, 0.999108734402852], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.00196078431372549, 1.0], [0.0, 0.0176470588235293, 1.0], [0.0, 0.03333333333333333, 1.0], [0.0, 0.049019607843137254, 1.0], [0.0, 0.06470588235294118, 1.0], [0.0, 0.08039215686274499, 1.0], [0.0, 0.09607843137254903, 1.0], [0.0, 0.11176470588235295, 1.0], [0.0, 0.12745098039215685, 1.0], [0.0, 0.14313725490196066, 1.0], [0.0, 0.1588235294117647, 1.0], [0.0, 0.17450980392156862, 1.0], [0.0, 0.19019607843137254, 1.0], [0.0, 0.20588235294117635, 1.0], [0.0, 0.22156862745098038, 1.0], [0.0, 0.2372549019607843, 1.0], [0.0, 0.2529411764705882, 1.0], [0.0, 0.26862745098039204, 1.0], [0.0, 0.28431372549019607, 1.0], [0.0, 0.3, 1.0], [0.0, 0.3156862745098039, 1.0], [0.0, 0.3313725490196077, 1.0], [0.0, 0.34705882352941175, 1.0], [0.0, 0.3627450980392157, 1.0], [0.0, 0.3784313725490196, 1.0], [0.0, 0.3941176470588234, 1.0], [0.0, 0.40980392156862744, 1.0], [0.0, 0.42549019607843136, 1.0], [0.0, 0.4411764705882353, 1.0], [0.0, 0.4568627450980391, 1.0], [0.0, 0.4725490196078431, 1.0], [0.0, 0.48823529411764705, 1.0], [0.0, 0.503921568627451, 1.0], [0.0, 0.5196078431372549, 1.0], [0.0, 0.5352941176470586, 1.0], [0.0, 0.5509803921568628, 1.0], [0.0, 0.5666666666666667, 1.0], [0.0, 0.5823529411764706, 1.0], [0.0, 0.5980392156862745, 1.0], [0.0, 0.6137254901960785, 1.0], [0.0, 0.6294117647058823, 1.0], [0.0, 0.6450980392156863, 1.0], [0.0, 0.66078431372549, 1.0], [0.0, 0.6764705882352942, 1.0], [0.0, 0.692156862745098, 1.0], [0.0, 0.707843137254902, 1.0], [0.0, 0.7235294117647059, 1.0], [0.0, 0.7392156862745098, 1.0], [0.0, 0.7549019607843137, 1.0], [0.0, 0.7705882352941177, 1.0], [0.0, 0.7862745098039213, 1.0], [0.0, 0.8019607843137255, 1.0], [0.0, 0.8176470588235294, 1.0], [0.0, 0.8333333333333334, 1.0], [0.0, 0.8490196078431372, 1.0], [0.0, 0.8647058823529412, 0.9962049335863378], [0.0, 0.8803921568627451, 0.9835547122074637], [0.0, 0.8960784313725491, 0.9709044908285895], [0.009487666034155417, 0.9117647058823527, 0.9582542694497156], [0.022137887413029723, 0.9274509803921569, 0.9456040480708413], [0.03478810879190385, 0.9431372549019608, 0.9329538266919671], [0.04743833017077798, 0.9588235294117647, 0.920303605313093], [0.06008855154965211, 0.9745098039215686, 0.9076533839342189], [0.07273877292852624, 0.9901960784313726, 0.8950031625553447], [0.08538899430740036, 1.0, 0.8823529411764706], [0.0980392156862745, 1.0, 0.8697027197975965], [0.11068943706514844, 1.0, 0.8570524984187226], [0.12333965844402275, 1.0, 0.8444022770398483], [0.13598987982289687, 1.0, 0.8317520556609741], [0.148640101201771, 1.0, 0.8191018342820999], [0.16129032258064513, 1.0, 0.8064516129032259], [0.17394054395951927, 1.0, 0.7938013915243517], [0.1865907653383934, 1.0, 0.7811511701454776], [0.19924098671726753, 1.0, 0.7685009487666035], [0.21189120809614148, 1.0, 0.7558507273877295], [0.2245414294750158, 1.0, 0.7432005060088551], [0.2371916508538899, 1.0, 0.7305502846299811], [0.24984187223276405, 1.0, 0.717900063251107], [0.26249209361163817, 1.0, 0.7052498418722328], [0.2751423149905123, 1.0, 0.6925996204933587], [0.2877925363693864, 1.0, 0.6799493991144845], [0.30044275774826057, 1.0, 0.6672991777356103], [0.3130929791271345, 1.0, 0.6546489563567364], [0.3257432005060088, 1.0, 0.6419987349778622], [0.3383934218848829, 1.0, 0.629348513598988], [0.3510436432637571, 1.0, 0.6166982922201139], [0.3636938646426312, 1.0, 0.6040480708412397], [0.3763440860215053, 1.0, 0.5913978494623656], [0.38899430740037944, 1.0, 0.5787476280834916], [0.4016445287792536, 1.0, 0.5660974067046174], [0.4142947501581275, 1.0, 0.5534471853257434], [0.42694497153700184, 1.0, 0.540796963946869], [0.43959519291587595, 1.0, 0.5281467425679949], [0.45224541429475007, 1.0, 0.5154965211891208], [0.46489563567362424, 1.0, 0.5028462998102468], [0.47754585705249836, 1.0, 0.4901960784313726], [0.4901960784313725, 1.0, 0.4775458570524984], [0.5028462998102466, 1.0, 0.46489563567362435], [0.5154965211891207, 1.0, 0.4522454142947502], [0.5281467425679949, 1.0, 0.439595192915876], [0.5407969639468686, 1.0, 0.4269449715370023], [0.5534471853257431, 1.0, 0.4142947501581278], [0.5660974067046173, 1.0, 0.4016445287792536], [0.5787476280834913, 1.0, 0.38899430740037955], [0.5913978494623655, 1.0, 0.3763440860215054], [0.6040480708412397, 1.0, 0.3636938646426312], [0.6166982922201137, 1.0, 0.35104364326375714], [0.6293485135989879, 1.0, 0.338393421884883], [0.641998734977862, 1.0, 0.3257432005060089], [0.6546489563567361, 1.0, 0.31309297912713474], [0.6672991777356103, 1.0, 0.30044275774826057], [0.6799493991144844, 1.0, 0.2877925363693865], [0.6925996204933585, 1.0, 0.27514231499051234], [0.7052498418722326, 1.0, 0.26249209361163817], [0.7179000632511068, 1.0, 0.2498418722327641], [0.730550284629981, 1.0, 0.23719165085388993], [0.7432005060088547, 1.0, 0.2245414294750162], [0.7558507273877292, 1.0, 0.2118912080961417], [0.7685009487666034, 1.0, 0.19924098671726753], [0.7811511701454774, 1.0, 0.18659076533839347], [0.7938013915243516, 1.0, 0.1739405439595193], [0.8064516129032256, 1.0, 0.16129032258064513], [0.8191018342820998, 1.0, 0.14864010120177107], [0.831752055660974, 1.0, 0.1359898798228969], [0.844402277039848, 1.0, 0.12333965844402273], [0.8570524984187222, 1.0, 0.11068943706514867], [0.8697027197975963, 1.0, 0.0980392156862745], [0.8823529411764705, 1.0, 0.08538899430740043], [0.8950031625553446, 1.0, 0.07273877292852626], [0.9076533839342187, 1.0, 0.06008855154965209], [0.9203036053130929, 1.0, 0.04743833017077803], [0.932953826691967, 1.0, 0.03478810879190386], [0.9456040480708408, 0.9883805374001459, 0.022137887413030133], [0.9582542694497153, 0.973856209150327, 0.009487666034155628], [0.9709044908285893, 0.9593318809005086, 0.0], [0.9835547122074635, 0.9448075526506902, 0.0], [0.9962049335863377, 0.9302832244008717, 0.0], [1.0, 0.9157588961510532, 0.0], [1.0, 0.9012345679012348, 0.0], [1.0, 0.8867102396514164, 0.0], [1.0, 0.872185911401598, 0.0], [1.0, 0.8576615831517794, 0.0], [1.0, 0.843137254901961, 0.0], [1.0, 0.8286129266521426, 0.0], [1.0, 0.8140885984023241, 0.0], [1.0, 0.7995642701525056, 0.0], [1.0, 0.7850399419026872, 0.0], [1.0, 0.7705156136528688, 0.0], [1.0, 0.7559912854030507, 0.0], [1.0, 0.741466957153232, 0.0], [1.0, 0.7269426289034134, 0.0], [1.0, 0.712418300653595, 0.0], [1.0, 0.6978939724037765, 0.0], [1.0, 0.6833696441539581, 0.0], [1.0, 0.6688453159041396, 0.0], [1.0, 0.6543209876543212, 0.0], [1.0, 0.6397966594045028, 0.0], [1.0, 0.6252723311546844, 0.0], [1.0, 0.6107480029048659, 0.0], [1.0, 0.5962236746550474, 0.0], [1.0, 0.5816993464052289, 0.0], [1.0, 0.5671750181554105, 0.0], [1.0, 0.5526506899055921, 0.0], [1.0, 0.5381263616557737, 0.0], [1.0, 0.5236020334059556, 0.0], [1.0, 0.5090777051561368, 0.0], [1.0, 0.4945533769063183, 0.0], [1.0, 0.48002904865649987, 0.0], [1.0, 0.46550472040668145, 0.0], [1.0, 0.4509803921568629, 0.0], [1.0, 0.4364560639070445, 0.0], [1.0, 0.4219317356572261, 0.0], [1.0, 0.40740740740740755, 0.0], [1.0, 0.39288307915758913, 0.0], [1.0, 0.3783587509077707, 0.0], [1.0, 0.3638344226579523, 0.0], [1.0, 0.34931009440813376, 0.0], [1.0, 0.33478576615831535, 0.0], [1.0, 0.3202614379084969, 0.0], [1.0, 0.3057371096586785, 0.0], [1.0, 0.2912127814088604, 0.0], [1.0, 0.27668845315904156, 0.0], [1.0, 0.26216412490922314, 0.0], [1.0, 0.24763979665940472, 0.0], [1.0, 0.2331154684095862, 0.0], [1.0, 0.21859114015976777, 0.0], [1.0, 0.20406681190994935, 0.0], [1.0, 0.18954248366013093, 0.0], [1.0, 0.1750181554103124, 0.0], [1.0, 0.16049382716049398, 0.0], [1.0, 0.14596949891067557, 0.0], [1.0, 0.13144517066085715, 0.0], [1.0, 0.11692084241103862, 0.0], [1.0, 0.1023965141612202, 0.0], [1.0, 0.08787218591140178, 0.0], [0.9991087344028523, 0.07334785766158336, 0.0], [0.9812834224598939, 0.058823529411765274, 0.0], [0.9634581105169343, 0.04429920116194641, 0.0], [0.9456327985739753, 0.029774872912127992, 0.0], [0.9278074866310163, 0.015250544662309573, 0.0], [0.9099821746880573, 0.0007262164124910431, 0.0], [0.8921568627450983, 0.0, 0.0], [0.8743315508021392, 0.0, 0.0], [0.8565062388591802, 0.0, 0.0], [0.8386809269162212, 0.0, 0.0], [0.8208556149732622, 0.0, 0.0], [0.8030303030303032, 0.0, 0.0], [0.7852049910873442, 0.0, 0.0], [0.7673796791443852, 0.0, 0.0], [0.7495543672014262, 0.0, 0.0], [0.7317290552584672, 0.0, 0.0], [0.7139037433155082, 0.0, 0.0], [0.6960784313725497, 0.0, 0.0], [0.6782531194295901, 0.0, 0.0], [0.6604278074866311, 0.0, 0.0], [0.6426024955436721, 0.0, 0.0], [0.6247771836007131, 0.0, 0.0], [0.606951871657754, 0.0, 0.0], [0.589126559714795, 0.0, 0.0], [0.571301247771836, 0.0, 0.0], [0.553475935828877, 0.0, 0.0], [0.535650623885918, 0.0, 0.0], [0.517825311942959, 0.0, 0.0], [0.5, 0.0, 0.0]];\nconst viridiscmap = [[0.267004, 0.004874, 0.329415], [0.26851, 0.009605, 0.335427], [0.269944, 0.014625, 0.341379], [0.271305, 0.019942, 0.347269], [0.272594, 0.025563, 0.353093], [0.273809, 0.031497, 0.358853], [0.274952, 0.037752, 0.364543], [0.276022, 0.044167, 0.370164], [0.277018, 0.050344, 0.375715], [0.277941, 0.056324, 0.381191], [0.278791, 0.062145, 0.386592], [0.279566, 0.067836, 0.391917], [0.280267, 0.073417, 0.397163], [0.280894, 0.078907, 0.402329], [0.281446, 0.08432, 0.407414], [0.281924, 0.089666, 0.412415], [0.282327, 0.094955, 0.417331], [0.282656, 0.100196, 0.42216], [0.28291, 0.105393, 0.426902], [0.283091, 0.110553, 0.431554], [0.283197, 0.11568, 0.436115], [0.283229, 0.120777, 0.440584], [0.283187, 0.125848, 0.44496], [0.283072, 0.130895, 0.449241], [0.282884, 0.13592, 0.453427], [0.282623, 0.140926, 0.457517], [0.28229, 0.145912, 0.46151], [0.281887, 0.150881, 0.465405], [0.281412, 0.155834, 0.469201], [0.280868, 0.160771, 0.472899], [0.280255, 0.165693, 0.476498], [0.279574, 0.170599, 0.479997], [0.278826, 0.17549, 0.483397], [0.278012, 0.180367, 0.486697], [0.277134, 0.185228, 0.489898], [0.276194, 0.190074, 0.493001], [0.275191, 0.194905, 0.496005], [0.274128, 0.199721, 0.498911], [0.273006, 0.20452, 0.501721], [0.271828, 0.209303, 0.504434], [0.270595, 0.214069, 0.507052], [0.269308, 0.218818, 0.509577], [0.267968, 0.223549, 0.512008], [0.26658, 0.228262, 0.514349], [0.265145, 0.232956, 0.516599], [0.263663, 0.237631, 0.518762], [0.262138, 0.242286, 0.520837], [0.260571, 0.246922, 0.522828], [0.258965, 0.251537, 0.524736], [0.257322, 0.25613, 0.526563], [0.255645, 0.260703, 0.528312], [0.253935, 0.265254, 0.529983], [0.252194, 0.269783, 0.531579], [0.250425, 0.27429, 0.533103], [0.248629, 0.278775, 0.534556], [0.246811, 0.283237, 0.535941], [0.244972, 0.287675, 0.53726], [0.243113, 0.292092, 0.538516], [0.241237, 0.296485, 0.539709], [0.239346, 0.300855, 0.540844], [0.237441, 0.305202, 0.541921], [0.235526, 0.309527, 0.542944], [0.233603, 0.313828, 0.543914], [0.231674, 0.318106, 0.544834], [0.229739, 0.322361, 0.545706], [0.227802, 0.326594, 0.546532], [0.225863, 0.330805, 0.547314], [0.223925, 0.334994, 0.548053], [0.221989, 0.339161, 0.548752], [0.220057, 0.343307, 0.549413], [0.21813, 0.347432, 0.550038], [0.21621, 0.351535, 0.550627], [0.214298, 0.355619, 0.551184], [0.212395, 0.359683, 0.55171], [0.210503, 0.363727, 0.552206], [0.208623, 0.367752, 0.552675], [0.206756, 0.371758, 0.553117], [0.204903, 0.375746, 0.553533], [0.203063, 0.379716, 0.553925], [0.201239, 0.38367, 0.554294], [0.19943, 0.387607, 0.554642], [0.197636, 0.391528, 0.554969], [0.19586, 0.395433, 0.555276], [0.1941, 0.399323, 0.555565], [0.192357, 0.403199, 0.555836], [0.190631, 0.407061, 0.556089], [0.188923, 0.41091, 0.556326], [0.187231, 0.414746, 0.556547], [0.185556, 0.41857, 0.556753], [0.183898, 0.422383, 0.556944], [0.182256, 0.426184, 0.55712], [0.180629, 0.429975, 0.557282], [0.179019, 0.433756, 0.55743], [0.177423, 0.437527, 0.557565], [0.175841, 0.44129, 0.557685], [0.174274, 0.445044, 0.557792], [0.172719, 0.448791, 0.557885], [0.171176, 0.45253, 0.557965], [0.169646, 0.456262, 0.55803], [0.168126, 0.459988, 0.558082], [0.166617, 0.463708, 0.558119], [0.165117, 0.467423, 0.558141], [0.163625, 0.471133, 0.558148], [0.162142, 0.474838, 0.55814], [0.160665, 0.47854, 0.558115], [0.159194, 0.482237, 0.558073], [0.157729, 0.485932, 0.558013], [0.15627, 0.489624, 0.557936], [0.154815, 0.493313, 0.55784], [0.153364, 0.497, 0.557724], [0.151918, 0.500685, 0.557587], [0.150476, 0.504369, 0.55743], [0.149039, 0.508051, 0.55725], [0.147607, 0.511733, 0.557049], [0.14618, 0.515413, 0.556823], [0.144759, 0.519093, 0.556572], [0.143343, 0.522773, 0.556295], [0.141935, 0.526453, 0.555991], [0.140536, 0.530132, 0.555659], [0.139147, 0.533812, 0.555298], [0.13777, 0.537492, 0.554906], [0.136408, 0.541173, 0.554483], [0.135066, 0.544853, 0.554029], [0.133743, 0.548535, 0.553541], [0.132444, 0.552216, 0.553018], [0.131172, 0.555899, 0.552459], [0.129933, 0.559582, 0.551864], [0.128729, 0.563265, 0.551229], [0.127568, 0.566949, 0.550556], [0.126453, 0.570633, 0.549841], [0.125394, 0.574318, 0.549086], [0.124395, 0.578002, 0.548287], [0.123463, 0.581687, 0.547445], [0.122606, 0.585371, 0.546557], [0.121831, 0.589055, 0.545623], [0.121148, 0.592739, 0.544641], [0.120565, 0.596422, 0.543611], [0.120092, 0.600104, 0.54253], [0.119738, 0.603785, 0.5414], [0.119512, 0.607464, 0.540218], [0.119423, 0.611141, 0.538982], [0.119483, 0.614817, 0.537692], [0.119699, 0.61849, 0.536347], [0.120081, 0.622161, 0.534946], [0.120638, 0.625828, 0.533488], [0.12138, 0.629492, 0.531973], [0.122312, 0.633153, 0.530398], [0.123444, 0.636809, 0.528763], [0.12478, 0.640461, 0.527068], [0.126326, 0.644107, 0.525311], [0.128087, 0.647749, 0.523491], [0.130067, 0.651384, 0.521608], [0.132268, 0.655014, 0.519661], [0.134692, 0.658636, 0.517649], [0.137339, 0.662252, 0.515571], [0.14021, 0.665859, 0.513427], [0.143303, 0.669459, 0.511215], [0.146616, 0.67305, 0.508936], [0.150148, 0.676631, 0.506589], [0.153894, 0.680203, 0.504172], [0.157851, 0.683765, 0.501686], [0.162016, 0.687316, 0.499129], [0.166383, 0.690856, 0.496502], [0.170948, 0.694384, 0.493803], [0.175707, 0.6979, 0.491033], [0.180653, 0.701402, 0.488189], [0.185783, 0.704891, 0.485273], [0.19109, 0.708366, 0.482284], [0.196571, 0.711827, 0.479221], [0.202219, 0.715272, 0.476084], [0.20803, 0.718701, 0.472873], [0.214, 0.722114, 0.469588], [0.220124, 0.725509, 0.466226], [0.226397, 0.728888, 0.462789], [0.232815, 0.732247, 0.459277], [0.239374, 0.735588, 0.455688], [0.24607, 0.73891, 0.452024], [0.252899, 0.742211, 0.448284], [0.259857, 0.745492, 0.444467], [0.266941, 0.748751, 0.440573], [0.274149, 0.751988, 0.436601], [0.281477, 0.755203, 0.432552], [0.288921, 0.758394, 0.428426], [0.296479, 0.761561, 0.424223], [0.304148, 0.764704, 0.419943], [0.311925, 0.767822, 0.415586], [0.319809, 0.770914, 0.411152], [0.327796, 0.77398, 0.40664], [0.335885, 0.777018, 0.402049], [0.344074, 0.780029, 0.397381], [0.35236, 0.783011, 0.392636], [0.360741, 0.785964, 0.387814], [0.369214, 0.788888, 0.382914], [0.377779, 0.791781, 0.377939], [0.386433, 0.794644, 0.372886], [0.395174, 0.797475, 0.367757], [0.404001, 0.800275, 0.362552], [0.412913, 0.803041, 0.357269], [0.421908, 0.805774, 0.35191], [0.430983, 0.808473, 0.346476], [0.440137, 0.811138, 0.340967], [0.449368, 0.813768, 0.335384], [0.458674, 0.816363, 0.329727], [0.468053, 0.818921, 0.323998], [0.477504, 0.821444, 0.318195], [0.487026, 0.823929, 0.312321], [0.496615, 0.826376, 0.306377], [0.506271, 0.828786, 0.300362], [0.515992, 0.831158, 0.294279], [0.525776, 0.833491, 0.288127], [0.535621, 0.835785, 0.281908], [0.545524, 0.838039, 0.275626], [0.555484, 0.840254, 0.269281], [0.565498, 0.84243, 0.262877], [0.575563, 0.844566, 0.256415], [0.585678, 0.846661, 0.249897], [0.595839, 0.848717, 0.243329], [0.606045, 0.850733, 0.236712], [0.616293, 0.852709, 0.230052], [0.626579, 0.854645, 0.223353], [0.636902, 0.856542, 0.21662], [0.647257, 0.8584, 0.209861], [0.657642, 0.860219, 0.203082], [0.668054, 0.861999, 0.196293], [0.678489, 0.863742, 0.189503], [0.688944, 0.865448, 0.182725], [0.699415, 0.867117, 0.175971], [0.709898, 0.868751, 0.169257], [0.720391, 0.87035, 0.162603], [0.730889, 0.871916, 0.156029], [0.741388, 0.873449, 0.149561], [0.751884, 0.874951, 0.143228], [0.762373, 0.876424, 0.137064], [0.772852, 0.877868, 0.131109], [0.783315, 0.879285, 0.125405], [0.79376, 0.880678, 0.120005], [0.804182, 0.882046, 0.114965], [0.814576, 0.883393, 0.110347], [0.82494, 0.88472, 0.106217], [0.83527, 0.886029, 0.102646], [0.845561, 0.887322, 0.099702], [0.85581, 0.888601, 0.097452], [0.866013, 0.889868, 0.095953], [0.876168, 0.891125, 0.09525], [0.886271, 0.892374, 0.095374], [0.89632, 0.893616, 0.096335], [0.906311, 0.894855, 0.098125], [0.916242, 0.896091, 0.100717], [0.926106, 0.89733, 0.104071], [0.935904, 0.89857, 0.108131], [0.945636, 0.899815, 0.112838], [0.9553, 0.901065, 0.118128], [0.964894, 0.902323, 0.123941], [0.974417, 0.90359, 0.130215], [0.983868, 0.904867, 0.136897], [0.993248, 0.906157, 0.143936]];\nconst infernocmap = [[0.001462, 0.000466, 0.013866], [0.002267, 0.00127, 0.01857], [0.003299, 0.002249, 0.024239], [0.004547, 0.003392, 0.030909], [0.006006, 0.004692, 0.038558], [0.007676, 0.006136, 0.046836], [0.009561, 0.007713, 0.055143], [0.011663, 0.009417, 0.06346], [0.013995, 0.011225, 0.071862], [0.016561, 0.013136, 0.080282], [0.019373, 0.015133, 0.088767], [0.022447, 0.017199, 0.097327], [0.025793, 0.019331, 0.10593], [0.029432, 0.021503, 0.114621], [0.033385, 0.023702, 0.123397], [0.037668, 0.025921, 0.132232], [0.042253, 0.028139, 0.141141], [0.046915, 0.030324, 0.150164], [0.051644, 0.032474, 0.159254], [0.056449, 0.034569, 0.168414], [0.06134, 0.03659, 0.177642], [0.066331, 0.038504, 0.186962], [0.071429, 0.040294, 0.196354], [0.076637, 0.041905, 0.205799], [0.081962, 0.043328, 0.215289], [0.087411, 0.044556, 0.224813], [0.09299, 0.045583, 0.234358], [0.098702, 0.046402, 0.243904], [0.104551, 0.047008, 0.25343], [0.110536, 0.047399, 0.262912], [0.116656, 0.047574, 0.272321], [0.122908, 0.047536, 0.281624], [0.129285, 0.047293, 0.290788], [0.135778, 0.046856, 0.299776], [0.142378, 0.046242, 0.308553], [0.149073, 0.045468, 0.317085], [0.15585, 0.044559, 0.325338], [0.162689, 0.043554, 0.333277], [0.169575, 0.042489, 0.340874], [0.176493, 0.041402, 0.348111], [0.183429, 0.040329, 0.354971], [0.190367, 0.039309, 0.361447], [0.197297, 0.0384, 0.367535], [0.204209, 0.037632, 0.373238], [0.211095, 0.03703, 0.378563], [0.217949, 0.036615, 0.383522], [0.224763, 0.036405, 0.388129], [0.231538, 0.036405, 0.3924], [0.238273, 0.036621, 0.396353], [0.244967, 0.037055, 0.400007], [0.25162, 0.037705, 0.403378], [0.258234, 0.038571, 0.406485], [0.26481, 0.039647, 0.409345], [0.271347, 0.040922, 0.411976], [0.27785, 0.042353, 0.414392], [0.284321, 0.043933, 0.416608], [0.290763, 0.045644, 0.418637], [0.297178, 0.04747, 0.420491], [0.303568, 0.049396, 0.422182], [0.309935, 0.051407, 0.423721], [0.316282, 0.05349, 0.425116], [0.32261, 0.055634, 0.426377], [0.328921, 0.057827, 0.427511], [0.335217, 0.06006, 0.428524], [0.3415, 0.062325, 0.429425], [0.347771, 0.064616, 0.430217], [0.354032, 0.066925, 0.430906], [0.360284, 0.069247, 0.431497], [0.366529, 0.071579, 0.431994], [0.372768, 0.073915, 0.4324], [0.379001, 0.076253, 0.432719], [0.385228, 0.078591, 0.432955], [0.391453, 0.080927, 0.433109], [0.397674, 0.083257, 0.433183], [0.403894, 0.08558, 0.433179], [0.410113, 0.087896, 0.433098], [0.416331, 0.090203, 0.432943], [0.422549, 0.092501, 0.432714], [0.428768, 0.09479, 0.432412], [0.434987, 0.097069, 0.432039], [0.441207, 0.099338, 0.431594], [0.447428, 0.101597, 0.43108], [0.453651, 0.103848, 0.430498], [0.459875, 0.106089, 0.429846], [0.4661, 0.108322, 0.429125], [0.472328, 0.110547, 0.428334], [0.478558, 0.112764, 0.427475], [0.484789, 0.114974, 0.426548], [0.491022, 0.117179, 0.425552], [0.497257, 0.119379, 0.424488], [0.503493, 0.121575, 0.423356], [0.50973, 0.123769, 0.422156], [0.515967, 0.12596, 0.420887], [0.522206, 0.12815, 0.419549], [0.528444, 0.130341, 0.418142], [0.534683, 0.132534, 0.416667], [0.54092, 0.134729, 0.415123], [0.547157, 0.136929, 0.413511], [0.553392, 0.139134, 0.411829], [0.559624, 0.141346, 0.410078], [0.565854, 0.143567, 0.408258], [0.572081, 0.145797, 0.406369], [0.578304, 0.148039, 0.404411], [0.584521, 0.150294, 0.402385], [0.590734, 0.152563, 0.40029], [0.59694, 0.154848, 0.398125], [0.603139, 0.157151, 0.395891], [0.60933, 0.159474, 0.393589], [0.615513, 0.161817, 0.391219], [0.621685, 0.164184, 0.388781], [0.627847, 0.166575, 0.386276], [0.633998, 0.168992, 0.383704], [0.640135, 0.171438, 0.381065], [0.64626, 0.173914, 0.378359], [0.652369, 0.176421, 0.375586], [0.658463, 0.178962, 0.372748], [0.66454, 0.181539, 0.369846], [0.670599, 0.184153, 0.366879], [0.676638, 0.186807, 0.363849], [0.682656, 0.189501, 0.360757], [0.688653, 0.192239, 0.357603], [0.694627, 0.195021, 0.354388], [0.700576, 0.197851, 0.351113], [0.7065, 0.200728, 0.347777], [0.712396, 0.203656, 0.344383], [0.718264, 0.206636, 0.340931], [0.724103, 0.20967, 0.337424], [0.729909, 0.212759, 0.333861], [0.735683, 0.215906, 0.330245], [0.741423, 0.219112, 0.326576], [0.747127, 0.222378, 0.322856], [0.752794, 0.225706, 0.319085], [0.758422, 0.229097, 0.315266], [0.76401, 0.232554, 0.311399], [0.769556, 0.236077, 0.307485], [0.775059, 0.239667, 0.303526], [0.780517, 0.243327, 0.299523], [0.785929, 0.247056, 0.295477], [0.791293, 0.250856, 0.29139], [0.796607, 0.254728, 0.287264], [0.801871, 0.258674, 0.283099], [0.807082, 0.262692, 0.278898], [0.812239, 0.266786, 0.274661], [0.817341, 0.270954, 0.27039], [0.822386, 0.275197, 0.266085], [0.827372, 0.279517, 0.26175], [0.832299, 0.283913, 0.257383], [0.837165, 0.288385, 0.252988], [0.841969, 0.292933, 0.248564], [0.846709, 0.297559, 0.244113], [0.851384, 0.30226, 0.239636], [0.855992, 0.307038, 0.235133], [0.860533, 0.311892, 0.230606], [0.865006, 0.316822, 0.226055], [0.869409, 0.321827, 0.221482], [0.873741, 0.326906, 0.216886], [0.878001, 0.33206, 0.212268], [0.882188, 0.337287, 0.207628], [0.886302, 0.342586, 0.202968], [0.890341, 0.347957, 0.198286], [0.894305, 0.353399, 0.193584], [0.898192, 0.358911, 0.18886], [0.902003, 0.364492, 0.184116], [0.905735, 0.37014, 0.17935], [0.90939, 0.375856, 0.174563], [0.912966, 0.381636, 0.169755], [0.916462, 0.387481, 0.164924], [0.919879, 0.393389, 0.16007], [0.923215, 0.399359, 0.155193], [0.92647, 0.405389, 0.150292], [0.929644, 0.411479, 0.145367], [0.932737, 0.417627, 0.140417], [0.935747, 0.423831, 0.13544], [0.938675, 0.430091, 0.130438], [0.941521, 0.436405, 0.125409], [0.944285, 0.442772, 0.120354], [0.946965, 0.449191, 0.115272], [0.949562, 0.45566, 0.110164], [0.952075, 0.462178, 0.105031], [0.954506, 0.468744, 0.099874], [0.956852, 0.475356, 0.094695], [0.959114, 0.482014, 0.089499], [0.961293, 0.488716, 0.084289], [0.963387, 0.495462, 0.079073], [0.965397, 0.502249, 0.073859], [0.967322, 0.509078, 0.068659], [0.969163, 0.515946, 0.063488], [0.970919, 0.522853, 0.058367], [0.97259, 0.529798, 0.053324], [0.974176, 0.53678, 0.048392], [0.975677, 0.543798, 0.043618], [0.977092, 0.55085, 0.03905], [0.978422, 0.557937, 0.034931], [0.979666, 0.565057, 0.031409], [0.980824, 0.572209, 0.028508], [0.981895, 0.579392, 0.02625], [0.982881, 0.586606, 0.024661], [0.983779, 0.593849, 0.02377], [0.984591, 0.601122, 0.023606], [0.985315, 0.608422, 0.024202], [0.985952, 0.61575, 0.025592], [0.986502, 0.623105, 0.027814], [0.986964, 0.630485, 0.030908], [0.987337, 0.63789, 0.034916], [0.987622, 0.64532, 0.039886], [0.987819, 0.652773, 0.045581], [0.987926, 0.66025, 0.05175], [0.987945, 0.667748, 0.058329], [0.987874, 0.675267, 0.065257], [0.987714, 0.682807, 0.072489], [0.987464, 0.690366, 0.07999], [0.987124, 0.697944, 0.087731], [0.986694, 0.70554, 0.095694], [0.986175, 0.713153, 0.103863], [0.985566, 0.720782, 0.112229], [0.984865, 0.728427, 0.120785], [0.984075, 0.736087, 0.129527], [0.983196, 0.743758, 0.138453], [0.982228, 0.751442, 0.147565], [0.981173, 0.759135, 0.156863], [0.980032, 0.766837, 0.166353], [0.978806, 0.774545, 0.176037], [0.977497, 0.782258, 0.185923], [0.976108, 0.789974, 0.196018], [0.974638, 0.797692, 0.206332], [0.973088, 0.805409, 0.216877], [0.971468, 0.813122, 0.227658], [0.969783, 0.820825, 0.238686], [0.968041, 0.828515, 0.249972], [0.966243, 0.836191, 0.261534], [0.964394, 0.843848, 0.273391], [0.962517, 0.851476, 0.285546], [0.960626, 0.859069, 0.29801], [0.95872, 0.866624, 0.31082], [0.956834, 0.874129, 0.323974], [0.954997, 0.881569, 0.337475], [0.953215, 0.888942, 0.351369], [0.951546, 0.896226, 0.365627], [0.950018, 0.903409, 0.380271], [0.948683, 0.910473, 0.395289], [0.947594, 0.917399, 0.410665], [0.946809, 0.924168, 0.426373], [0.946392, 0.930761, 0.442367], [0.946403, 0.937159, 0.458592], [0.946903, 0.943348, 0.47497], [0.947937, 0.949318, 0.491426], [0.949545, 0.955063, 0.50786], [0.95174, 0.960587, 0.524203], [0.954529, 0.965896, 0.540361], [0.957896, 0.971003, 0.556275], [0.961812, 0.975924, 0.571925], [0.966249, 0.980678, 0.587206], [0.971162, 0.985282, 0.602154], [0.976511, 0.989753, 0.61676], [0.982257, 0.994109, 0.631017], [0.988362, 0.998364, 0.644924]];\nconst siesmiccmap = [[0.0, 0.0, 0.3], [0.0, 0.0, 0.31098039215686274], [0.0, 0.0, 0.3219607843137255], [0.0, 0.0, 0.33294117647058824], [0.0, 0.0, 0.34392156862745094], [0.0, 0.0, 0.3549019607843137], [0.0, 0.0, 0.36588235294117644], [0.0, 0.0, 0.3768627450980392], [0.0, 0.0, 0.38784313725490194], [0.0, 0.0, 0.3988235294117647], [0.0, 0.0, 0.40980392156862744], [0.0, 0.0, 0.4207843137254902], [0.0, 0.0, 0.43176470588235294], [0.0, 0.0, 0.4427450980392157], [0.0, 0.0, 0.45372549019607844], [0.0, 0.0, 0.4647058823529412], [0.0, 0.0, 0.4756862745098039], [0.0, 0.0, 0.48666666666666664], [0.0, 0.0, 0.4976470588235294], [0.0, 0.0, 0.5086274509803921], [0.0, 0.0, 0.5196078431372548], [0.0, 0.0, 0.5305882352941176], [0.0, 0.0, 0.5415686274509803], [0.0, 0.0, 0.5525490196078431], [0.0, 0.0, 0.5635294117647058], [0.0, 0.0, 0.5745098039215686], [0.0, 0.0, 0.5854901960784313], [0.0, 0.0, 0.5964705882352941], [0.0, 0.0, 0.6074509803921568], [0.0, 0.0, 0.6184313725490196], [0.0, 0.0, 0.6294117647058823], [0.0, 0.0, 0.6403921568627451], [0.0, 0.0, 0.6513725490196078], [0.0, 0.0, 0.6623529411764706], [0.0, 0.0, 0.6733333333333333], [0.0, 0.0, 0.6843137254901961], [0.0, 0.0, 0.6952941176470588], [0.0, 0.0, 0.7062745098039215], [0.0, 0.0, 0.7172549019607843], [0.0, 0.0, 0.7282352941176471], [0.0, 0.0, 0.7392156862745097], [0.0, 0.0, 0.7501960784313725], [0.0, 0.0, 0.7611764705882352], [0.0, 0.0, 0.7721568627450981], [0.0, 0.0, 0.7831372549019607], [0.0, 0.0, 0.7941176470588234], [0.0, 0.0, 0.8050980392156861], [0.0, 0.0, 0.8160784313725491], [0.0, 0.0, 0.8270588235294116], [0.0, 0.0, 0.8380392156862744], [0.0, 0.0, 0.8490196078431371], [0.0, 0.0, 0.8599999999999999], [0.0, 0.0, 0.8709803921568626], [0.0, 0.0, 0.8819607843137254], [0.0, 0.0, 0.8929411764705881], [0.0, 0.0, 0.9039215686274509], [0.0, 0.0, 0.9149019607843136], [0.0, 0.0, 0.9258823529411764], [0.0, 0.0, 0.9368627450980391], [0.0, 0.0, 0.9478431372549019], [0.0, 0.0, 0.9588235294117646], [0.0, 0.0, 0.9698039215686274], [0.0, 0.0, 0.9807843137254901], [0.0, 0.0, 0.9917647058823529], [0.00392156862745098, 0.00392156862745098, 1.0], [0.0196078431372549, 0.0196078431372549, 1.0], [0.0352941176470586, 0.0352941176470586, 1.0], [0.050980392156862744, 0.050980392156862744, 1.0], [0.06666666666666667, 0.06666666666666667, 1.0], [0.08235294117647059, 0.08235294117647059, 1.0], [0.09803921568627451, 0.09803921568627451, 1.0], [0.11372549019607843, 0.11372549019607843, 1.0], [0.12941176470588237, 0.12941176470588237, 1.0], [0.1450980392156863, 0.1450980392156863, 1.0], [0.16078431372548999, 0.16078431372548999, 1.0], [0.17647058823529413, 0.17647058823529413, 1.0], [0.19215686274509805, 0.19215686274509805, 1.0], [0.20784313725490197, 0.20784313725490197, 1.0], [0.2235294117647059, 0.2235294117647059, 1.0], [0.23921568627450981, 0.23921568627450981, 1.0], [0.2549019607843137, 0.2549019607843137, 1.0], [0.27058823529411763, 0.27058823529411763, 1.0], [0.28627450980392133, 0.28627450980392133, 1.0], [0.30196078431372547, 0.30196078431372547, 1.0], [0.3176470588235294, 0.3176470588235294, 1.0], [0.3333333333333333, 0.3333333333333333, 1.0], [0.34901960784313724, 0.34901960784313724, 1.0], [0.36470588235294116, 0.36470588235294116, 1.0], [0.3803921568627451, 0.3803921568627451, 1.0], [0.396078431372549, 0.396078431372549, 1.0], [0.4117647058823527, 0.4117647058823527, 1.0], [0.42745098039215684, 0.42745098039215684, 1.0], [0.44313725490196076, 0.44313725490196076, 1.0], [0.4588235294117647, 0.4588235294117647, 1.0], [0.4745098039215686, 0.4745098039215686, 1.0], [0.49019607843137253, 0.49019607843137253, 1.0], [0.5058823529411764, 0.5058823529411764, 1.0], [0.5215686274509804, 0.5215686274509804, 1.0], [0.5372549019607841, 0.5372549019607841, 1.0], [0.5529411764705883, 0.5529411764705883, 1.0], [0.5686274509803921, 0.5686274509803921, 1.0], [0.5843137254901961, 0.5843137254901961, 1.0], [0.6, 0.6, 1.0], [0.615686274509804, 0.615686274509804, 1.0], [0.6313725490196078, 0.6313725490196078, 1.0], [0.6470588235294118, 0.6470588235294118, 1.0], [0.6627450980392154, 0.6627450980392154, 1.0], [0.6784313725490196, 0.6784313725490196, 1.0], [0.6941176470588235, 0.6941176470588235, 1.0], [0.7098039215686275, 0.7098039215686275, 1.0], [0.7254901960784313, 0.7254901960784313, 1.0], [0.7411764705882353, 0.7411764705882353, 1.0], [0.7568627450980392, 0.7568627450980392, 1.0], [0.7725490196078432, 0.7725490196078432, 1.0], [0.7882352941176468, 0.7882352941176468, 1.0], [0.803921568627451, 0.803921568627451, 1.0], [0.8196078431372549, 0.8196078431372549, 1.0], [0.8352941176470589, 0.8352941176470589, 1.0], [0.8509803921568627, 0.8509803921568627, 1.0], [0.8666666666666667, 0.8666666666666667, 1.0], [0.8823529411764706, 0.8823529411764706, 1.0], [0.8980392156862745, 0.8980392156862745, 1.0], [0.9137254901960782, 0.9137254901960782, 1.0], [0.9294117647058824, 0.9294117647058824, 1.0], [0.9450980392156862, 0.9450980392156862, 1.0], [0.9607843137254902, 0.9607843137254902, 1.0], [0.9764705882352941, 0.9764705882352941, 1.0], [0.9921568627450981, 0.9921568627450981, 1.0], [1.0, 0.9921568627450981, 0.9921568627450981], [1.0, 0.9764705882352941, 0.9764705882352941], [1.0, 0.9607843137254902, 0.9607843137254902], [1.0, 0.9450980392156862, 0.9450980392156862], [1.0, 0.9294117647058828, 0.9294117647058828], [1.0, 0.9137254901960784, 0.9137254901960784], [1.0, 0.8980392156862745, 0.8980392156862745], [1.0, 0.8823529411764706, 0.8823529411764706], [1.0, 0.8666666666666667, 0.8666666666666667], [1.0, 0.8509803921568627, 0.8509803921568627], [1.0, 0.8352941176470589, 0.8352941176470589], [1.0, 0.8196078431372549, 0.8196078431372549], [1.0, 0.803921568627451, 0.803921568627451], [1.0, 0.788235294117647, 0.788235294117647], [1.0, 0.7725490196078432, 0.7725490196078432], [1.0, 0.7568627450980392, 0.7568627450980392], [1.0, 0.7411764705882353, 0.7411764705882353], [1.0, 0.7254901960784313, 0.7254901960784313], [1.0, 0.7098039215686274, 0.7098039215686274], [1.0, 0.6941176470588235, 0.6941176470588235], [1.0, 0.6784313725490201, 0.6784313725490201], [1.0, 0.6627450980392157, 0.6627450980392157], [1.0, 0.6470588235294117, 0.6470588235294117], [1.0, 0.6313725490196078, 0.6313725490196078], [1.0, 0.615686274509804, 0.615686274509804], [1.0, 0.6, 0.6], [1.0, 0.584313725490196, 0.584313725490196], [1.0, 0.5686274509803921, 0.5686274509803921], [1.0, 0.5529411764705883, 0.5529411764705883], [1.0, 0.5372549019607843, 0.5372549019607843], [1.0, 0.5215686274509803, 0.5215686274509803], [1.0, 0.5058823529411764, 0.5058823529411764], [1.0, 0.4901960784313726, 0.4901960784313726], [1.0, 0.4745098039215686, 0.4745098039215686], [1.0, 0.45882352941176474, 0.45882352941176474], [1.0, 0.44313725490196076, 0.44313725490196076], [1.0, 0.42745098039215734, 0.42745098039215734], [1.0, 0.4117647058823529, 0.4117647058823529], [1.0, 0.39607843137254906, 0.39607843137254906], [1.0, 0.3803921568627451, 0.3803921568627451], [1.0, 0.3647058823529412, 0.3647058823529412], [1.0, 0.34901960784313724, 0.34901960784313724], [1.0, 0.33333333333333337, 0.33333333333333337], [1.0, 0.3176470588235294, 0.3176470588235294], [1.0, 0.3019607843137255, 0.3019607843137255], [1.0, 0.28627450980392155, 0.28627450980392155], [1.0, 0.2705882352941177, 0.2705882352941177], [1.0, 0.2549019607843137, 0.2549019607843137], [1.0, 0.23921568627450984, 0.23921568627450984], [1.0, 0.22352941176470587, 0.22352941176470587], [1.0, 0.207843137254902, 0.207843137254902], [1.0, 0.19215686274509802, 0.19215686274509802], [1.0, 0.1764705882352946, 0.1764705882352946], [1.0, 0.16078431372549018, 0.16078431372549018], [1.0, 0.14509803921568631, 0.14509803921568631], [1.0, 0.12941176470588234, 0.12941176470588234], [1.0, 0.11372549019607847, 0.11372549019607847], [1.0, 0.0980392156862745, 0.0980392156862745], [1.0, 0.08235294117647063, 0.08235294117647063], [1.0, 0.06666666666666665, 0.06666666666666665], [1.0, 0.050980392156862786, 0.050980392156862786], [1.0, 0.03529411764705881, 0.03529411764705881], [1.0, 0.019607843137254943, 0.019607843137254943], [1.0, 0.0039215686274509665, 0.0039215686274509665], [0.9941176470588236, 0.0, 0.0], [0.9862745098039216, 0.0, 0.0], [0.9784313725490196, 0.0, 0.0], [0.9705882352941176, 0.0, 0.0], [0.9627450980392159, 0.0, 0.0], [0.9549019607843138, 0.0, 0.0], [0.9470588235294117, 0.0, 0.0], [0.9392156862745098, 0.0, 0.0], [0.9313725490196079, 0.0, 0.0], [0.9235294117647059, 0.0, 0.0], [0.9156862745098039, 0.0, 0.0], [0.907843137254902, 0.0, 0.0], [0.9, 0.0, 0.0], [0.892156862745098, 0.0, 0.0], [0.884313725490196, 0.0, 0.0], [0.8764705882352941, 0.0, 0.0], [0.8686274509803922, 0.0, 0.0], [0.8607843137254902, 0.0, 0.0], [0.8529411764705882, 0.0, 0.0], [0.8450980392156863, 0.0, 0.0], [0.8372549019607846, 0.0, 0.0], [0.8294117647058823, 0.0, 0.0], [0.8215686274509804, 0.0, 0.0], [0.8137254901960784, 0.0, 0.0], [0.8058823529411765, 0.0, 0.0], [0.7980392156862746, 0.0, 0.0], [0.7901960784313725, 0.0, 0.0], [0.7823529411764706, 0.0, 0.0], [0.7745098039215687, 0.0, 0.0], [0.7666666666666666, 0.0, 0.0], [0.7588235294117647, 0.0, 0.0], [0.7509803921568627, 0.0, 0.0], [0.7431372549019608, 0.0, 0.0], [0.7352941176470589, 0.0, 0.0], [0.7274509803921569, 0.0, 0.0], [0.7196078431372549, 0.0, 0.0], [0.7117647058823532, 0.0, 0.0], [0.7039215686274509, 0.0, 0.0], [0.696078431372549, 0.0, 0.0], [0.6882352941176471, 0.0, 0.0], [0.6803921568627451, 0.0, 0.0], [0.6725490196078432, 0.0, 0.0], [0.6647058823529413, 0.0, 0.0], [0.6568627450980392, 0.0, 0.0], [0.6490196078431373, 0.0, 0.0], [0.6411764705882352, 0.0, 0.0], [0.6333333333333333, 0.0, 0.0], [0.6254901960784314, 0.0, 0.0], [0.6176470588235294, 0.0, 0.0], [0.6098039215686275, 0.0, 0.0], [0.6019607843137256, 0.0, 0.0], [0.5941176470588235, 0.0, 0.0], [0.5862745098039218, 0.0, 0.0], [0.5784313725490196, 0.0, 0.0], [0.5705882352941176, 0.0, 0.0], [0.5627450980392157, 0.0, 0.0], [0.5549019607843138, 0.0, 0.0], [0.5470588235294118, 0.0, 0.0], [0.5392156862745099, 0.0, 0.0], [0.5313725490196078, 0.0, 0.0], [0.5235294117647059, 0.0, 0.0], [0.5156862745098039, 0.0, 0.0], [0.5078431372549019, 0.0, 0.0], [0.5, 0.0, 0.0]];\nconst RdYlBucmap = [[0.6470588235294118, 0.0, 0.14901960784313725], [0.6547481737793157, 0.007381776239907728, 0.14917339484813533], [0.6624375240292195, 0.014763552479815456, 0.1493271818531334], [0.6701268742791234, 0.022145328719723183, 0.14948096885813147], [0.6778162245290273, 0.02952710495963091, 0.14963475586312958], [0.6855055747789311, 0.03690888119953864, 0.14978854286812765], [0.6931949250288351, 0.044290657439446365, 0.14994232987312572], [0.700884275278739, 0.0516724336793541, 0.1500961168781238], [0.7085736255286429, 0.05905420991926182, 0.15024990388312187], [0.7162629757785467, 0.06643598615916955, 0.15040369088811995], [0.7239523260284506, 0.07381776239907728, 0.15055747789311805], [0.7316416762783545, 0.081199538638985, 0.15071126489811612], [0.7393310265282584, 0.08858131487889273, 0.1508650519031142], [0.7470203767781622, 0.09596309111880046, 0.15101883890811227], [0.7547097270280662, 0.1033448673587082, 0.15117262591311034], [0.7623990772779701, 0.11072664359861592, 0.15132641291810842], [0.7700884275278739, 0.11810841983852365, 0.15148019992310652], [0.7777777777777778, 0.12549019607843137, 0.1516339869281046], [0.7854671280276817, 0.1328719723183391, 0.15178777393310267], [0.7931564782775855, 0.14025374855824682, 0.15194156093810074], [0.8008458285274894, 0.14763552479815456, 0.1520953479430988], [0.8085351787773933, 0.15501730103806227, 0.1522491349480969], [0.8162245290272971, 0.16239907727797, 0.15240292195309496], [0.8239138792772011, 0.16978085351787775, 0.15255670895809306], [0.831603229527105, 0.17716262975778546, 0.15271049596309114], [0.8392925797770088, 0.18454440599769317, 0.1528642829680892], [0.8453671664744329, 0.19292579777008842, 0.15509419454056134], [0.8498269896193772, 0.20230680507497117, 0.15940023068050752], [0.8542868127643214, 0.2116878123798539, 0.1637062668204537], [0.8587466359092657, 0.22106881968473663, 0.16801230296039987], [0.8632064590542099, 0.23044982698961938, 0.17231833910034602], [0.8676662821991542, 0.2398308342945021, 0.1766243752402922], [0.8721261053440984, 0.24921184159938484, 0.18093041138023838], [0.8765859284890427, 0.25859284890426754, 0.18523644752018453], [0.8810457516339869, 0.2679738562091503, 0.1895424836601307], [0.8855055747789312, 0.27735486351403305, 0.1938485198000769], [0.8899653979238754, 0.2867358708189158, 0.19815455594002307], [0.8944252210688197, 0.29611687812379844, 0.20246059207996922], [0.8988850442137639, 0.3054978854286813, 0.20676662821991543], [0.9033448673587082, 0.314878892733564, 0.2110726643598616], [0.9078046905036524, 0.32425990003844674, 0.21537870049980778], [0.9122645136485967, 0.3336409073433294, 0.2196847366397539], [0.9167243367935409, 0.3430219146482122, 0.22399077277970014], [0.9211841599384852, 0.35240292195309497, 0.22829680891964632], [0.9256439830834294, 0.36178392925797764, 0.23260284505959247], [0.9301038062283737, 0.37116493656286037, 0.23690888119953862], [0.9345636293733179, 0.38054594386774315, 0.24121491733948483], [0.9390234525182622, 0.3899269511726259, 0.24552095347943098], [0.9434832756632066, 0.39930795847750866, 0.24982698961937716], [0.9479430988081508, 0.40868896578239133, 0.2541330257593233], [0.952402921953095, 0.4180699730872741, 0.2584390618992695], [0.9568627450980393, 0.42745098039215684, 0.2627450980392157], [0.958246828143022, 0.43744713571703187, 0.267358708189158], [0.9596309111880047, 0.44744329104190683, 0.2719723183391003], [0.9610149942329873, 0.45743944636678197, 0.2765859284890427], [0.96239907727797, 0.46743560169165704, 0.281199538638985], [0.9637831603229527, 0.47743175701653207, 0.28581314878892733], [0.9651672433679355, 0.48742791234140703, 0.2904267589388696], [0.9665513264129182, 0.49742406766628217, 0.295040369088812], [0.9679354094579008, 0.5074202229911572, 0.2996539792387543], [0.9693194925028835, 0.5174163783160323, 0.30426758938869664], [0.9707035755478662, 0.5274125336409072, 0.3088811995386389], [0.972087658592849, 0.5374086889657823, 0.3134948096885813], [0.9734717416378317, 0.5474048442906574, 0.3181084198385236], [0.9748558246828143, 0.5574009996155325, 0.32272202998846594], [0.976239907727797, 0.5673971549404074, 0.32733564013840827], [0.9776239907727797, 0.5773933102652824, 0.33194925028835054], [0.9790080738177624, 0.5873894655901576, 0.3365628604382929], [0.9803921568627452, 0.5973856209150326, 0.34117647058823525], [0.9817762399077278, 0.6073817762399076, 0.3457900807381776], [0.9831603229527105, 0.6173779315647827, 0.3504036908881199], [0.9845444059976932, 0.6273740868896577, 0.3550173010380622], [0.9859284890426759, 0.6373702422145328, 0.35963091118800455], [0.9873125720876587, 0.6473663975394078, 0.3642445213379469], [0.9886966551326413, 0.6573625528642827, 0.36885813148788915], [0.990080738177624, 0.6673587081891579, 0.37347174163783153], [0.9914648212226067, 0.677354863514033, 0.37808535178777386], [0.9922337562475971, 0.6861976163014224, 0.3840061514801998], [0.9923875432525952, 0.6938869665513263, 0.3912341407151095], [0.9925413302575933, 0.7015763168012302, 0.3984621299500191], [0.9926951172625913, 0.7092656670511341, 0.40569011918492875], [0.9928489042675894, 0.716955017301038, 0.41291810841983845], [0.9930026912725874, 0.7246443675509417, 0.420146097654748], [0.9931564782775856, 0.7323337178008458, 0.4273740868896577], [0.9933102652825836, 0.7400230680507497, 0.43460207612456736], [0.9934640522875817, 0.7477124183006535, 0.44183006535947705], [0.9936178392925799, 0.7554017685505574, 0.4490580545943867], [0.9937716262975779, 0.7630911188004613, 0.45628604382929633], [0.993925413302576, 0.7707804690503652, 0.463514033064206], [0.994079200307574, 0.778469819300269, 0.47074202229911566], [0.9942329873125721, 0.7861591695501728, 0.4779700115340252], [0.9943867743175702, 0.7938485198000769, 0.48519800076893493], [0.9945405613225683, 0.8015378700499807, 0.4924259900038446], [0.9946943483275663, 0.8092272202998846, 0.49965397923875426], [0.9948481353325644, 0.8169165705497885, 0.506881968473664], [0.9950019223375625, 0.8246059207996924, 0.5141099577085736], [0.9951557093425606, 0.8322952710495963, 0.5213379469434832], [0.9953094963475586, 0.8399846212995001, 0.5285659361783929], [0.9954632833525567, 0.8476739715494039, 0.5357939254133024], [0.9956170703575548, 0.855363321799308, 0.5430219146482123], [0.9957708573625529, 0.8630526720492118, 0.5502499038831219], [0.9959246443675509, 0.8707420222991157, 0.5574778931180315], [0.996078431372549, 0.8784313725490196, 0.5647058823529412], [0.9962322183775472, 0.88319876970396, 0.5719338715878508], [0.9963860053825452, 0.8879661668589004, 0.5791618608227604], [0.9965397923875433, 0.8927335640138409, 0.5863898500576701], [0.9966935793925413, 0.8975009611687812, 0.5936178392925797], [0.9968473663975395, 0.9022683583237217, 0.6008458285274895], [0.9970011534025375, 0.907035755478662, 0.6080738177623991], [0.9971549404075356, 0.9118031526336025, 0.6153018069973087], [0.9973087274125336, 0.9165705497885429, 0.6225297962322184], [0.9974625144175318, 0.9213379469434833, 0.629757785467128], [0.9976163014225298, 0.9261053440984237, 0.6369857747020377], [0.9977700884275279, 0.930872741253364, 0.6442137639369473], [0.9979238754325259, 0.9356401384083044, 0.6514417531718568], [0.998077662437524, 0.9404075355632449, 0.6586697424067667], [0.9982314494425221, 0.9451749327181853, 0.6658977316416763], [0.9983852364475202, 0.9499423298731258, 0.673125720876586], [0.9985390234525182, 0.9547097270280661, 0.6803537101114956], [0.9986928104575163, 0.9594771241830066, 0.6875816993464052], [0.9988465974625145, 0.9642445213379469, 0.6948096885813149], [0.9990003844675125, 0.9690119184928874, 0.7020376778162245], [0.9991541714725106, 0.9737793156478277, 0.7092656670511341], [0.9993079584775086, 0.9785467128027682, 0.7164936562860438], [0.9994617454825068, 0.9833141099577085, 0.7237216455209535], [0.9996155324875048, 0.988081507112649, 0.7309496347558632], [0.9997693194925029, 0.9928489042675894, 0.7381776239907728], [0.9999231064975009, 0.9976163014225298, 0.7454056132256824], [0.9976163014225298, 0.9990772779700116, 0.7534025374855825], [0.9928489042675894, 0.9972318339100346, 0.7621683967704729], [0.988081507112649, 0.9953863898500577, 0.7709342560553633], [0.9833141099577086, 0.9935409457900808, 0.7797001153402537], [0.9785467128027683, 0.9916955017301039, 0.7884659746251439], [0.9737793156478278, 0.9898500576701269, 0.7972318339100346], [0.9690119184928874, 0.9880046136101499, 0.805997693194925], [0.964244521337947, 0.986159169550173, 0.8147635524798154], [0.9594771241830066, 0.984313725490196, 0.8235294117647058], [0.9547097270280662, 0.9824682814302191, 0.8322952710495962], [0.9499423298731258, 0.9806228373702423, 0.8410611303344866], [0.9451749327181853, 0.9787773933102653, 0.8498269896193771], [0.940407535563245, 0.9769319492502884, 0.8585928489042675], [0.9356401384083045, 0.9750865051903114, 0.8673587081891578], [0.9308727412533642, 0.9732410611303345, 0.8761245674740483], [0.9261053440984237, 0.9713956170703576, 0.8848904267589387], [0.9213379469434834, 0.9695501730103806, 0.8936562860438291], [0.9165705497885429, 0.9677047289504037, 0.9024221453287196], [0.9118031526336026, 0.9658592848904267, 0.9111880046136099], [0.9070357554786621, 0.9640138408304498, 0.9199538638985003], [0.9022683583237219, 0.962168396770473, 0.9287197231833906], [0.8975009611687813, 0.960322952710496, 0.9374855824682813], [0.892733564013841, 0.9584775086505191, 0.9462514417531716], [0.8879661668589005, 0.9566320645905421, 0.955017301038062], [0.8831987697039602, 0.9547866205305652, 0.9637831603229524], [0.8784313725490197, 0.9529411764705882, 0.9725490196078429], [0.8702806612841217, 0.9489427143406383, 0.9702422145328721], [0.8621299500192235, 0.9449442522106882, 0.9679354094579009], [0.8539792387543255, 0.9409457900807382, 0.9656286043829297], [0.8458285274894274, 0.9369473279507883, 0.9633217993079586], [0.8376778162245292, 0.9329488658208382, 0.9610149942329873], [0.8295271049596311, 0.9289504036908882, 0.9587081891580161], [0.821376393694733, 0.9249519415609382, 0.956401384083045], [0.8132256824298348, 0.9209534794309882, 0.9540945790080738], [0.8050749711649368, 0.9169550173010381, 0.9517877739331027], [0.7969242599000387, 0.9129565551710881, 0.9494809688581315], [0.7887735486351408, 0.9089580930411382, 0.9471741637831604], [0.7806228373702424, 0.904959630911188, 0.9448673587081892], [0.7724721261053443, 0.9009611687812381, 0.942560553633218], [0.7643214148404461, 0.8969627066512881, 0.9402537485582468], [0.756170703575548, 0.892964244521338, 0.9379469434832757], [0.74801999231065, 0.888965782391388, 0.9356401384083045], [0.7398692810457519, 0.884967320261438, 0.9333333333333333], [0.7317185697808537, 0.880968858131488, 0.9310265282583622], [0.7235678585159556, 0.8769703960015379, 0.928719723183391], [0.7154171472510575, 0.8729719338715879, 0.9264129181084199], [0.7072664359861593, 0.868973471741638, 0.9241061130334487], [0.6991157247212613, 0.8649750096116879, 0.9217993079584775], [0.6909650134563632, 0.8609765474817379, 0.9194925028835064], [0.682814302191465, 0.8569780853517879, 0.9171856978085352], [0.6746635909265669, 0.8529796232218378, 0.914878892733564], [0.6663590926566707, 0.8475970780469052, 0.9118800461361016], [0.6579008073817767, 0.84083044982699, 0.9081891580161479], [0.6494425221068821, 0.8340638216070744, 0.9044982698961939], [0.6409842368319879, 0.8272971933871589, 0.90080738177624], [0.6325259515570936, 0.8205305651672435, 0.8971164936562861], [0.6240676662821993, 0.8137639369473281, 0.8934256055363322], [0.615609381007305, 0.8069973087274127, 0.8897347174163783], [0.6071510957324108, 0.8002306805074972, 0.8860438292964244], [0.5986928104575164, 0.7934640522875818, 0.8823529411764707], [0.5902345251826222, 0.7866974240676664, 0.8786620530565168], [0.5817762399077279, 0.7799307958477509, 0.8749711649365629], [0.5733179546328336, 0.7731641676278356, 0.871280276816609], [0.5648596693579393, 0.7663975394079201, 0.8675893886966551], [0.5564013840830451, 0.7596309111880047, 0.8638985005767013], [0.5479430988081508, 0.7528642829680893, 0.8602076124567474], [0.5394848135332565, 0.7460976547481739, 0.8565167243367936], [0.5310265282583623, 0.7393310265282584, 0.8528258362168397], [0.5225682429834682, 0.7325643983083432, 0.8491349480968859], [0.5141099577085737, 0.7257977700884276, 0.845444059976932], [0.5056516724336794, 0.7190311418685121, 0.8417531718569781], [0.49719338715878514, 0.7122645136485968, 0.8380622837370242], [0.48873510188389085, 0.7054978854286813, 0.8343713956170704], [0.48027681660899657, 0.6987312572087659, 0.8306805074971165], [0.47181853133410223, 0.6919646289888505, 0.8269896193771626], [0.463360246059208, 0.6851980007689351, 0.8232987312572088], [0.4549019607843137, 0.6784313725490196, 0.8196078431372549], [0.4476739715494041, 0.6698193002691273, 0.8151480199923107], [0.44044598231449444, 0.6612072279892349, 0.8106881968473664], [0.43321799307958475, 0.6525951557093426, 0.8062283737024222], [0.4259900038446751, 0.6439830834294502, 0.8017685505574779], [0.4187620146097655, 0.6353710111495579, 0.7973087274125337], [0.41153402537485584, 0.6267589388696655, 0.7928489042675894], [0.40430603613994615, 0.6181468665897731, 0.7883890811226452], [0.39707804690503673, 0.6095347943098811, 0.783929257977701], [0.38985005767012687, 0.6009227220299884, 0.7794694348327567], [0.38262206843521723, 0.5923106497500962, 0.7750096116878123], [0.37539407920030754, 0.5836985774702038, 0.7705497885428682], [0.3681660899653979, 0.5750865051903115, 0.7660899653979238], [0.36093810073048826, 0.5664744329104191, 0.7616301422529796], [0.3537101114955786, 0.5578623606305267, 0.7571703191080353], [0.346482122260669, 0.5492502883506344, 0.7527104959630911], [0.3392541330257593, 0.540638216070742, 0.7482506728181468], [0.33202614379084966, 0.5320261437908497, 0.7437908496732026], [0.32479815455593997, 0.5234140715109573, 0.7393310265282584], [0.31757016532103033, 0.514801999231065, 0.7348712033833141], [0.3103421760861207, 0.5061899269511726, 0.7304113802383699], [0.30311418685121105, 0.49757785467128024, 0.7259515570934256], [0.2958861976163014, 0.4889657823913879, 0.7214917339484814], [0.2886582083813918, 0.4803537101114955, 0.7170319108035371], [0.2814302191464823, 0.4717416378316035, 0.712572087658593], [0.2742022299115725, 0.46312956555171086, 0.7081122645136486], [0.26905036524413684, 0.4539792387543252, 0.7034986543637063], [0.2659746251441753, 0.44429065743944635, 0.6987312572087659], [0.26289888504421377, 0.43460207612456747, 0.6939638600538255], [0.2598231449442522, 0.42491349480968854, 0.6891964628988851], [0.25674740484429065, 0.41522491349480967, 0.6844290657439447], [0.2536716647443291, 0.4055363321799308, 0.6796616685890042], [0.25059592464436753, 0.39584775086505186, 0.6748942714340639], [0.247520184544406, 0.386159169550173, 0.6701268742791234], [0.24444444444444444, 0.3764705882352941, 0.6653594771241831], [0.24136870434448288, 0.3667820069204152, 0.6605920799692426], [0.23829296424452134, 0.3570934256055363, 0.6558246828143023], [0.23521722414455978, 0.34740484429065743, 0.6510572856593618], [0.23214148404459822, 0.33771626297577856, 0.6462898885044214], [0.2290657439446367, 0.32802768166089963, 0.641522491349481], [0.2259900038446752, 0.31833910034602103, 0.6367550941945408], [0.22291426374471357, 0.3086505190311419, 0.6319876970396002], [0.219838523644752, 0.29896193771626295, 0.6272202998846598], [0.21676278354479048, 0.2892733564013841, 0.6224529027297194], [0.21368704344482892, 0.2795847750865052, 0.617685505574779], [0.21061130334486738, 0.2698961937716263, 0.6129181084198385], [0.2075355632449058, 0.2602076124567474, 0.6081507112648982], [0.20445982314494426, 0.25051903114186846, 0.6033833141099577], [0.2013840830449827, 0.24083044982698962, 0.5986159169550174], [0.19830834294502114, 0.23114186851211074, 0.5938485198000769], [0.1952326028450596, 0.2214532871972318, 0.5890811226451365], [0.19215686274509805, 0.21176470588235294, 0.5843137254901961]];\nconst graymap = Array.from({ length: 256 }, (_, i) => { const val = i / 255; return [val, val, val]; }); // RGB iguales = escala de grises \nconst constant = Array.from({ length: 256 }, () => [0.533, 0.533, 0.533]) // Valor constante = 0x888888 en RGB = 136 / 255\n\nexport const colors255 = { \n    'constant': constant,\n    'graymap': graymap,\n    'jetcmap': jetcmap,\n    'viridiscmap': viridiscmap,\n    'infernocmap': infernocmap,\n    'seismiccmap': siesmiccmap,\n    'RdYlBucmap': RdYlBucmap\n}\n\nexport function applyColormap(imageData, colormapId) {\n    let output;\n    const width = imageData.width;\n    const height = imageData.height;\n    const input = imageData.data;\n\n    // Primero, se guardan los valores a y b del espacio Lab de cada píxel de la imagen original. \n    // Luego, se crea un colormap especial en RGB usando esos valores a y b combinados con el valor L \n    // actual (altura del mesh) para aproximar el color de textura en la zona correspondiente del píxel en la malla.\n    // Nota: Esto es así porque, sea cual sea el tipo de imagen de entrada, las PDE se resuelven con el canal de luminancia.\n    // Resto de colormaps más \"normales\"\n    const colormap = colors255[colormapId];\n    output = new Uint8ClampedArray(width * height * 4);\n\n    for (let i = 0; i < width * height; i++) {\n        const inputIndex = i * 4;\n        const outputIndex = i * 4;\n        \n        // Valor de gris (todos los canales son iguales)\n        const grayValue = input[inputIndex];\n        const color = colormap[grayValue];\n        \n        output[outputIndex] = Math.round(color[0] * 255);     // R\n        output[outputIndex + 1] = Math.round(color[1] * 255); // G\n        output[outputIndex + 2] = Math.round(color[2] * 255); // B\n        output[outputIndex + 3] = 255;                        // Alpha\n    }\n\n    return new ImageData(output, width, height);\n}\n\nexport function applyOriginalLabColormapToImage(imageData, aData, bData, origWidth, origHeight) {\n    const w = imageData.width;\n    const h = imageData.height;\n    const output = new ImageData(w, h);\n    \n    for (let j = 0; j < h; j++) {\n        for (let i = 0; i < w; i++) {\n            const index = j * w + i;\n            const dataIndex = index * 4;\n            \n            const heightValue = imageData.data[dataIndex]; // [0.0, 255.0]\n            \n            // Calcular posición relativa en la imagen original, de tamaño originalWidthxoriginalHeight\n            const relX = i / (w - 1);\n            const relY = j / (h - 1);\n            \n            // Mapear a coordenadas de la imagen original\n            const origX = Math.floor(relX * (origWidth - 1));\n            const origY = Math.floor(relY * (origHeight - 1));\n            const origIndex = origY * origWidth + origX;\n            \n            // Obtener valores Lab\n            const L_val = heightValue * 100 / 255; // [0.0, 255.0] -> [0, 100]\n            const a_val = aData ? aData[origIndex] : 0;\n            const b_val = bData ? bData[origIndex] : 0;\n            \n            // Convertir Lab a RGB\n            const [r, g, b] = labToRgb(L_val, a_val, b_val);\n            \n            // Asignar valores RGB\n            output.data[dataIndex] = r * 255;\n            output.data[dataIndex + 1] = g * 255;\n            output.data[dataIndex + 2] = b * 255;\n            output.data[dataIndex + 3] = 255;\n        }\n    }\n    \n    return output;\n}\n\nexport function applyOriginalLabColormapToImageFullRes(heightMapFlat, aData, bData, origWidth, origHeight, meshWidth, meshHeight) {\n    const output = new ImageData(origWidth, origHeight);\n    \n    for (let j = 0; j < origHeight; j++) {\n        for (let i = 0; i < origWidth; i++) {\n            const index = j * origWidth + i;\n            const dataIndex = index * 4;\n            \n            // Mapear coordenadas originales a la malla\n            const meshX = Math.floor((i / (origWidth - 1)) * (meshWidth - 1));\n            const meshY = Math.floor((j / (origHeight - 1)) * (meshHeight - 1));\n            const meshIndex = meshY * meshWidth + meshX;\n            \n            // Obtener altura de la malla\n            const heightValue = heightMapFlat[meshIndex];\n            const L_val = heightValue * 100; // [0,100]\n            \n            // Usar ab originales\n            const a_val = aData ? aData[index] : 0;\n            const b_val = bData ? bData[index] : 0;\n            \n            // Convertir Lab a RGB\n            const [r, g, b] = labToRgb(L_val, a_val, b_val);\n            \n            output.data[dataIndex] = r * 255;\n            output.data[dataIndex + 1] = g * 255;\n            output.data[dataIndex + 2] = b * 255;\n            output.data[dataIndex + 3] = 255;\n        }\n    }\n    \n    return output;\n}\n\nexport function applyLabColormap(imageData, originala, originalb) {\n    const width = imageData.width;\n    const height = imageData.height;\n    const input = imageData.data;\n    const output = new Uint8ClampedArray(width * height * 4);\n    \n    for (let i = 0; i < width * height; i++) {\n        const inputIdx = i * 4;\n        const outputIdx = i * 4;\n        \n        // L actual (de la simulación) normalizada a [0, 100]\n        const L = (input[inputIdx] / 255) * 100;\n\n        // Valores ab originales (con validación)\n        const a = originala && originala[i] ? originala[i] : 0;\n        const b = originalb && originalb[i] ? originalb[i] : 0;\n\n        // Convertir Lab a RGB\n        const [r, g, b_val] = labToRgb(L, a, b);\n        \n        // Convertir a bytes [0-255] con redondeo\n        output[outputIdx] = Math.round(Math.max(0, Math.min(255, r * 255)));\n        output[outputIdx + 1] = Math.round(Math.max(0, Math.min(255, g * 255)));\n        output[outputIdx + 2] = Math.round(Math.max(0, Math.min(255, b_val * 255)));\n        output[outputIdx + 3] = 255; // Alpha\n    }\n    \n    return new ImageData(output, width, height);\n}\n\n// Usando punto blanco D65 como referencia\nexport function rgbToLab(r, g, b) {\n    // 1º) RGB -> XYZ (aplicar gamma inversa)\n    r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;\n    g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;\n    b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;\n\n    // Matriz de transformación RGB a XYZ (sRGB/D65)\n    const X = r * 0.4124564 + g * 0.3575761 + b * 0.1804375;\n    const Y = r * 0.2126729 + g * 0.7151522 + b * 0.0721750;\n    const Z = r * 0.0193339 + g * 0.1191920 + b * 0.9503041;\n\n    // 2º) XYZ -> Lab\n    const xn = X / 0.95047;\n    const yn = Y / 1.00000;\n    const zn = Z / 1.08883;\n\n    const delta = 6.0 / 29.0;\n    const delta2 = delta * delta;\n    const delta3 = delta2 * delta;\n    \n    const f = t => t > delta3 ? Math.pow(t, 1/3) : (t / (3 * delta2)) + (4.0 / 29.0);\n    \n    const fx = f(xn);\n    const fy = f(yn);\n    const fz = f(zn);\n    \n    return [\n        116 * fy - 16,  // L\n        500 * (fx - fy), // a\n        200 * (fy - fz)  // b\n    ];\n}\n\nexport function labToRgb(L, a, b) {\n    // Validar rangos de entrada\n    L = Math.max(0, Math.min(100, L));\n    a = Math.max(-128, Math.min(127, a));\n    b = Math.max(-128, Math.min(127, b));\n\n    // 1º) Lab -> XYZ\n    const fy = (L + 16) / 116;\n    const fx = a / 500 + fy;\n    const fz = fy - b / 200;\n    \n    // Constantes del espacio Lab\n    const delta = 6.0 / 29.0;\n    const delta2 = delta * delta;\n    \n    // Función inversa f^-1\n    const finv = t => t > delta ? t * t * t : 3 * delta2 * (t - 4 / 29);\n    \n    // Aplicar punto blanco D65\n    const X = 0.95047 * finv(fx);\n    const Y = 1.00000 * finv(fy);\n    const Z = 1.08883 * finv(fz);\n\n    // 2º) XYZ -> RGB (matriz inversa sRGB/D65)\n    let r = X *  3.2406 + Y * -1.5372 + Z * -0.4986;\n    let g = X * -0.9689 + Y *  1.8758 + Z *  0.0415;\n    let b_val = X *  0.0557 + Y * -0.2040 + Z *  1.0570;\n\n    // Aplicar corrección gamma\n    const gammaCorrect = val => {\n        if (val <= 0.0031308) {\n            return 12.92 * val;\n        } else {\n            return 1.055 * Math.pow(val, 1/2.4) - 0.055;\n        }\n    };\n\n    r = gammaCorrect(r);\n    g = gammaCorrect(g);\n    b_val = gammaCorrect(b_val);\n\n    if (isNaN(r) || isNaN(g) || isNaN(b_val)) {\n        console.warn(\"Valores NaN detectados en labToRgb:\", {L, a, b, X, Y, Z});\n        return [0, 0, 0]; // Negro como fallback\n    }\n\n    // Clamp a [0, 1]\n    return [\n        Math.max(0, Math.min(1, r)),\n        Math.max(0, Math.min(1, g)),\n        Math.max(0, Math.min(1, b_val))\n    ];\n}","import { rgbToLab } from './color-maps.js';\n\n// Convierte una imagen a escala de grises y la redimensiona a 512x512 píxeles, asumiendo que la imagen de entrada \n// está idealmente en formato WebP (i.e. RGBA, aunque funciona con cualquier formato soportado por canvas).\n// Devuelve un objeto ImageData con los píxeles procesados, así como los valores a y b de Lab originales.\nexport function preprocessImageToGrayscale(imgElement, Nx, Ny) {\n    // Create canvas with original dimensions\n    const canvas = document.createElement('canvas');\n    canvas.width = imgElement.width;\n    canvas.height = imgElement.height;\n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(imgElement, 0, 0, canvas.width, canvas.height);\n    \n    // Get original image data\n    const originalImageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    const data = originalImageData.data;\n    const totalPixels = canvas.width * canvas.height;\n\n    // Prepare arrays for Lab components\n    const LData = new Float32Array(totalPixels);\n    const aData = new Float32Array(totalPixels);\n    const bData = new Float32Array(totalPixels);\n\n    // Convert RGB to Lab for each pixel\n    for (let i = 0; i < totalPixels; i++) {\n        const r = data[i * 4] / 255;\n        const g = data[i * 4 + 1] / 255;\n        const b = data[i * 4 + 2] / 255;\n        \n        // Convert RGB to Lab\n        const [L, a, b_] = rgbToLab(r, g, b);\n        \n        LData[i] = L;\n        aData[i] = a;\n        bData[i] = b_;\n    }\n\n    // Create grayscale image (using just L channel) with target dimensions (Nx, Ny)\n    const targetCanvas = document.createElement('canvas');\n    targetCanvas.width = Nx;\n    targetCanvas.height = Ny;\n    const targetCtx = targetCanvas.getContext('2d');\n    \n    // Draw original image resized to target dimensions\n    targetCtx.drawImage(imgElement, 0, 0, Nx, Ny);\n    const targetImageData = targetCtx.getImageData(0, 0, Nx, Ny);\n    const targetData = targetImageData.data;\n    \n    // Convert to grayscale (L channel)\n    for (let i = 0; i < Nx * Ny; i++) {\n        const r = targetData[i * 4];\n        const g = targetData[i * 4 + 1];\n        const b = targetData[i * 4 + 2];\n        // const luminance = L / 100.0; // Con Lab\n        // const luminance = 0.2126 * r + 0.7152 * g + 0.0722 * b; // Con Rec. 709 (sRGB)\n        const luminance = 0.299 * r + 0.587 * g + 0.114 * b; // Con Rec. 601 (BT.709)\n        targetData[i * 4] = luminance;\n        targetData[i * 4 + 1] = luminance;\n        targetData[i * 4 + 2] = luminance;\n        targetData[i * 4 + 3] = 255;\n    }\n\n    return {\n        imageData: targetImageData,  // Grayscale image with target dimensions\n        LData,                      // Original L channel\n        aData,                      // Original a channel\n        bData                       // Original b channel\n    };\n}","import * as THREE from 'three';\n\nexport function getHeightMapFromImageData(imageData, targetWidth, targetHeight) {\n  const { data, width: imgWidth, height: imgHeight } = imageData;\n  const heightMap = new Float32Array(targetWidth * targetHeight);\n  \n  // Muestreo con interpolación bilineal\n  for (let y = 0; y < targetHeight; y++) {\n    for (let x = 0; x < targetWidth; x++) {\n      // Coordenadas normalizadas\n      const u = x / (targetWidth - 1);\n      const v = y / (targetHeight - 1);\n      \n      // Coordenadas en la imagen\n      const imgX = u * (imgWidth - 1);\n      const imgY = v * (imgHeight - 1);\n      \n      // Interpolación bilineal\n      const x1 = Math.floor(imgX);\n      const y1 = Math.floor(imgY);\n      const x2 = Math.min(x1 + 1, imgWidth - 1);\n      const y2 = Math.min(y1 + 1, imgHeight - 1);\n      \n      // Valores de los 4 píxeles circundantes\n      const q11 = data[(y1 * imgWidth + x1) * 4] / 255;\n      const q12 = data[(y2 * imgWidth + x1) * 4] / 255;\n      const q21 = data[(y1 * imgWidth + x2) * 4] / 255;\n      const q22 = data[(y2 * imgWidth + x2) * 4] / 255;\n      \n      // Interpolación\n      const heightValue = bilinearInterpolation(\n        imgX - x1, imgY - y1,\n        q11, q12, q21, q22\n      );\n      \n      heightMap[y * targetWidth + x] = heightValue;\n    }\n  }\n\n  return heightMap;\n}\n\nexport function bilinearInterpolation(x, y, q11, q12, q21, q22) {\n  return q11 * (1 - x) * (1 - y) +\n         q21 * x * (1 - y) +\n         q12 * (1 - x) * y +\n         q22 * x * y;\n}\n\nexport function createHeightMesh(heightMapFlat, subdivisionsX, subdivisionsY, normalize = false, scale = 1, usePercentiles = false, enhanceContrast = false) {\n  // Usamos BufferGeometry para mejor control\n  const geometry = new THREE.BufferGeometry();\n\n  const width = subdivisionsX;\n  const height = subdivisionsY;\n  const sizeX = 10;\n  const sizeY = 10 * (height / width);\n  \n  // Crear vértices\n  const vertices = new Float32Array(width * height * 3);\n  const uvs = new Float32Array(width * height * 2);\n  \n  // Cálculo de rango dinámico\n  let min, max, range;\n  \n  if (usePercentiles) {\n    // Ajuste de rango dinámico con percentiles (5% y 95%) para evitar outliers\n    const sortedHeights = [...heightMapFlat].sort((a, b) => a - b);\n    min = sortedHeights[Math.floor(sortedHeights.length * 0.05)];\n    max = sortedHeights[Math.floor(sortedHeights.length * 0.95)];\n  } else {\n    // Usando mínimo y máximo absolutos\n    min = Math.min(...heightMapFlat);\n    max = Math.max(...heightMapFlat);\n  }\n  range = max - min || 1; // Evitar división por cero\n\n  let vertexIndex = 0;\n  let uvIndex = 0;\n  \n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      // Posición XZ\n      const px = (x / (width - 1) - 0.5) * sizeX;\n      const pz = (y / (height - 1) - 0.5) * sizeY;\n      \n      // Altura normalizada (si acaso con ajuste no lineal para mejor contraste)\n      let py;\n      const heightValue = heightMapFlat[y * width + x];\n      if (normalize) {\n        let normalizedHeight = (heightValue - min) / range;\n        if (enhanceContrast) {\n          normalizedHeight = Math.pow(normalizedHeight, 1.5);\n        }\n        py = normalizedHeight * scale;\n      }\n      else {\n        py = heightValue;\n      }\n      \n      // Asignar vértices\n      vertices[vertexIndex++] = px;\n      vertices[vertexIndex++] = py;\n      vertices[vertexIndex++] = pz;\n      \n      // Coordenadas UV\n      uvs[uvIndex++] = x / (width - 1);\n      uvs[uvIndex++] = 1 - (y / (height - 1));\n    }\n  }\n  \n  // Crear índices para las caras\n  const indices = [];\n  for (let y = 0; y < height - 1; y++) {\n    for (let x = 0; x < width - 1; x++) {\n      const a = y * width + x;\n      const b = y * width + x + 1;\n      const c = (y + 1) * width + x;\n      const d = (y + 1) * width + x + 1;\n      \n      indices.push(a, b, d);\n      indices.push(a, d, c);\n    }\n  }\n  \n  // Asignar atributos a la geometría\n  geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n  geometry.setAttribute('uv', new THREE.BufferAttribute(uvs, 2));\n  geometry.setIndex(indices);\n  \n  // Poner en el plano horizontal\n  geometry.rotateX(- Math.PI / 2);\n  geometry.rotateZ(Math.PI / 2);\n  geometry.rotateY(Math.PI);\n\n  // Calcular normales\n  geometry.computeVertexNormals();\n  \n  // Crear atributo de color (valor inicial 0.5)\n  const colors = new Float32Array(width * height * 3);\n  for (let i = 0; i < colors.length; i++) {\n      colors[i] = 0.533; // 0x88 en [0-1]\n  }\n  geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\n  \n  // Material mejorado\n  const material = new THREE.MeshStandardMaterial({\n    vertexColors: true, // Habilitar el uso de colores de vértices\n    roughness: 0.7,\n    metalness: 0.3,\n    side: THREE.DoubleSide,\n    flatShading: false\n  });\n  // const material = new THREE.MeshBasicMaterial({\n  //   vertexColors: true,\n  //   side: THREE.DoubleSide\n  // });\n  \n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.name = \"mesh\";\n  mesh.rotation.x = -Math.PI / 2;\n  \n  // Creear wireframe\n  const wireframe = new THREE.LineSegments(\n    new THREE.WireframeGeometry(geometry),\n    new THREE.LineBasicMaterial({\n        color: 0x888888,          \n        transparent: true,\n        opacity: 0.5            \n    })\n  );\n  wireframe.name = \"wireframe\";\n  wireframe.rotation.x = -Math.PI / 2;\n\n  // Agrupar ambos\n  const meshGroup = new THREE.Group();\n  meshGroup.add(mesh);\n  meshGroup.add(wireframe);\n\n  return meshGroup;\n}","export class Solver {\n    // Tipos de PDEs a resolver\n    static PDE_TYPES = {\n        HEAT: 'heat',       // Ecuación de difusión, o de conducción, o de calor, o de Fourier\n        WAVE: 'wave',       // Ecuación de onda\n        EXPONENTIAL_DECAY: 'exponential-decay', // Ley del decaimiento exponencial du​/dt = −λu\n        // GENERAL_WAVE: '¿?',  // Generaliza la de onda\n        // LAPLACE: 'laplace'  // Ecuación de Laplace\n    };\n\n    // Tipos de condiciones de frontera soportadas\n    static BOUNDARY_TYPES = {\n        DIRICHLET: 'dirichlet',       // Valores fijos (puede ser cualquier valor)\n        ZERO: 'zero',                 // Caso especial de Dirichlet con u=0\n        NEUMANN: 'neumann',           // Derivada fija (flujo constante)\n        FIXED: 'fixed',               // Valores originales (de u_0)\n        REFLECTIVE: 'reflective',     // Caso especial de Neumann con ∂u/∂n=0\n        PERIODIC: 'periodic',         // Bordes conectados (izq-der, arr-aba)\n        ROBIN: 'robin',               // Condición mixta (αu + β∂u/∂n = γ)\n        // MIXED: 'mixed',            // Diferentes tipos en diferentes bordes\n        // CAUCHY: 'cauchy'           // Condición general de primer orden\n    };\n\n    // Tipos de esquemas numéricos para resolver las PDEs\n    static SCHEME_TYPES = {\n        FORWARD_EULER: 'forward-euler',  // Explícito\n        BACKWARD_EULER: 'backward-euler' // Implícito \n    };\n\n    constructor({\n        // Valores por defecto\n        imageData,\n        deltaPx = 1.0,\n        dt = 0.1,\n        pdeType = 'heat',\n        boundaryType = 'periodic',\n        schemeType = 'forward-euler'\n    }) {\n        this.width = imageData.width;\n        this.height = imageData.height;\n        this.deltaPx = deltaPx;\n        this.dt = dt;\n\n        // Parámetros específicos de PDEs\n        this.c = 50.0;\n        this.alpha = 10.0;\n        this.lambda = 10.0;\n\n        const validPdeTypes = Object.values(Solver.PDE_TYPES);\n        const validBoundaryTypes = Object.values(Solver.BOUNDARY_TYPES);\n        const validSchemeTypes = Object.values(Solver.SCHEME_TYPES);\n\n        this.pdeType = validPdeTypes.includes(pdeType.toLowerCase()) ? pdeType.toLowerCase() : Solver.PDE_TYPES.HEAT;\n        this.boundaryType = validBoundaryTypes.includes(boundaryType.toLowerCase()) ? boundaryType.toLowerCase() : Solver.BOUNDARY_TYPES.PERIODIC;\n        this.schemeType = validSchemeTypes.includes(schemeType.toLowerCase()) ? schemeType.toLowerCase() : Solver.SCHEME_TYPES.FORWARD_EULER;\n\n        this.calculateCoefficient();\n\n        // Verificar condición de estabilidad solo para esquemas explícitos\n        if (this.schemeType === Solver.SCHEME_TYPES.FORWARD_EULER) {\n            if (this.pdeType === Solver.PDE_TYPES.HEAT && this.coeff > 0.5) {\n                console.warn(`¡Condición de estabilidad no satisfecha para ecuación de calor! (${this.coeff} > 0.5). La simulación puede ser inestable. Considera usar otro esquema.`);\n            }\n\n            if (this.pdeType === Solver.PDE_TYPES.WAVE && this.coeff > 1.0) {\n                console.warn(`¡Condición de CFL no satisfecha para ecuación de onda! (${Math.sqrt(this.coeff)} > 1). La simulación puede ser inestable. Considera usar otro esquema.`);\n            }\n\n            if (this.pdeType === Solver.PDE_TYPES.EXPONENTIAL_DECAY && this.dt > 2 / this.lambda) {\n                console.warn(`¡Condición de estabilidad no satisfecha para decaimiento exponencial! (${this.dt} > 2/λ). La simulación puede ser inestable.`);\n            }\n        }\n\n        // Normalizar imagen\n        this.imageData = this.cloneImageData(imageData);\n        this.reset();\n\n        // Guardar estado original para condiciones FIXED\n        if (this.boundaryType === Solver.BOUNDARY_TYPES.FIXED) {\n            this.originalState = this.deepCopyMatrix(this.currentState);\n        }\n    }\n\n    normalizeImageData(imageData) {\n        const matrix = [];\n        for (let y = 0; y < this.height; y++) {\n            const row = [];\n            for (let x = 0; x < this.width; x++) {\n                const idx = (y * this.width + x) * 4;\n                row.push(imageData.data[idx] / 255.0); // Normalizar a [0,1] y almacenar\n            }\n            matrix.push(row);\n        }\n        return matrix;\n    }\n\n    step() {\n        if (this.pdeType === Solver.PDE_TYPES.HEAT) {\n            return this.stepHeatEquation();\n        } else if (this.pdeType === Solver.PDE_TYPES.WAVE) {\n            return this.stepWaveEquation();\n        } else {\n            return this.stepExpDecayEquation();\n        }\n    }\n\n    stepHeatEquation() {\n        // Ecuación de calor: ∂u/∂t = c∇²u\n        if (this.schemeType === Solver.SCHEME_TYPES.FORWARD_EULER) {\n            return this.stepHeatEquationFE();\n        } else {\n            return this.stepHeatEquationBE();\n        }\n    }\n\n    stepHeatEquationFE() {\n        // Forward Euler explícito para ecuación de calor\n        for (let y = 1; y < this.height - 1; y++) {\n            for (let x = 1; x < this.width - 1; x++) {\n                const laplacian = (\n                    this.currentState[y][x - 1] +\n                    this.currentState[y][x + 1] +\n                    this.currentState[y - 1][x] +\n                    this.currentState[y + 1][x] -\n                    4 * this.currentState[y][x]\n                );\n\n                this.nextState[y][x] = this.currentState[y][x] + this.coeff * laplacian;\n                this.nextState[y][x] = this.clamp_zero_one(this.nextState[y][x]);\n            }\n        }\n\n        this.applyBoundaryConditions();\n\n        [this.currentState, this.nextState] = [this.nextState, this.currentState];\n\n        return this.denormalizeToImageData(this.currentState);\n    }\n\n    stepHeatEquationBE() {\n        // Backward Euler implícito para ecuación de calor\n        // Necesitamos resolver un sistema lineal: (I - coeff * L) u^{n+1} = u^n\n        // Donde L es el operador laplaciano discreto\n\n        // Para simplificar, usamos Jacobi iteration para resolver el sistema\n        const maxIter = 50;\n        const tolerance = 1e-4;\n\n        // Inicializar solución con el estado actual\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                this.nextState[y][x] = this.currentState[y][x];\n            }\n        }\n\n        for (let iter = 0; iter < maxIter; iter++) {\n            let maxDiff = 0;\n\n            const tempState = this.deepCopyMatrix(this.nextState); // Jacobi necesita una copia del estado anterior\n\n            for (let y = 1; y < this.height - 1; y++) {\n                for (let x = 1; x < this.width - 1; x++) {\n                    const rhs = this.currentState[y][x];\n\n                    const neighborSum =\n                        tempState[y][x - 1] +\n                        tempState[y][x + 1] +\n                        tempState[y - 1][x] +\n                        tempState[y + 1][x];\n\n                    const newValue = (rhs + this.coeff * neighborSum) / (1 + 4 * this.coeff);\n                    const diff = Math.abs(newValue - this.nextState[y][x]);\n                    if (diff > maxDiff) maxDiff = diff;\n\n                    this.nextState[y][x] = this.clamp_zero_one(newValue);\n                }\n            }\n\n            this.applyBoundaryConditions();\n\n            if (maxDiff < tolerance) break;\n        }\n\n        [this.currentState, this.nextState] = [this.nextState, this.currentState];\n\n        return this.denormalizeToImageData(this.currentState);\n    }\n\n    stepWaveEquation() {\n        // Ecuación de onda: ∂²u/∂t² = c²∇²u\n        if (this.schemeType === Solver.SCHEME_TYPES.FORWARD_EULER) {\n            return this.stepWaveEquationFE();\n        } else {\n            return this.stepWaveEquationBE();\n        }\n    }\n\n    stepWaveEquationFE() {\n        // Forward Euler explícito para ecuación de onda\n        for (let y = 1; y < this.height - 1; y++) {\n            for (let x = 1; x < this.width - 1; x++) {\n                const laplacian = (\n                    this.currentState[y][x - 1] +\n                    this.currentState[y][x + 1] +\n                    this.currentState[y - 1][x] +\n                    this.currentState[y + 1][x] -\n                    4 * this.currentState[y][x]\n                );\n\n                this.nextState[y][x] =\n                    2 * this.currentState[y][x] -\n                    this.previousState[y][x] +\n                    this.coeff * laplacian;\n\n                this.nextState[y][x] = this.clamp_zero_one(this.nextState[y][x]);\n            }\n        }\n\n        this.applyBoundaryConditions();\n\n        [this.previousState, this.currentState, this.nextState] = [this.currentState, this.nextState, this.previousState];\n\n        return this.denormalizeToImageData(this.currentState);\n    }\n\n    stepWaveEquationBE() {\n        // Backward Euler implícito para ecuación de onda\n        // Necesitamos resolver un sistema lineal: (I - coeff * L) u^{n+1} = 2u^n - u^{n-1} + coeff * L u^n\n        // Es más complejo que para la ecuación de calor\n\n        // Para simplificar, usamos un enfoque semi-implícito aquí\n        const maxIter = 25; // Más de 25 se vio que afecta gravemente a los FPS\n        const tolerance = 1e-4;\n\n        // Inicializar con currentState\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                this.nextState[y][x] = this.currentState[y][x];\n            }\n        }\n\n        for (let iter = 0; iter < maxIter; iter++) {\n            let maxDiff = 0;\n            const temp = this.deepCopyMatrix(this.nextState);\n\n            for (let y = 1; y < this.height - 1; y++) {\n                for (let x = 1; x < this.width - 1; x++) {\n                    // RHS = 2*u^n - u^{n-1}\n                    const rhs = 2 * this.currentState[y][x] - this.previousState[y][x];\n\n                    // Jacobi iteration\n                    const neighborSum =\n                        temp[y][x - 1] +\n                        temp[y][x + 1] +\n                        temp[y - 1][x] +\n                        temp[y + 1][x];\n\n                    const newValue = (rhs + this.coeff * neighborSum) / (1 + 4 * this.coeff);\n                    const diff = Math.abs(newValue - this.nextState[y][x]);\n                    if (diff > maxDiff) maxDiff = diff;\n\n                    this.nextState[y][x] = this.clamp_zero_one(newValue);\n                }\n            }\n\n            this.applyBoundaryConditions();\n\n            if (maxDiff < tolerance) break;\n        }\n\n        // Actualizar los estados\n        [this.previousState, this.currentState, this.nextState] = [this.currentState, this.nextState, this.previousState];\n\n        return this.denormalizeToImageData(this.currentState);\n    }\n\n    stepExpDecayEquation() {\n        // Ecuación de decaimiento exponencial: ∂u/∂t = -λu = f(u, t)\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const current = this.currentState[y][x];\n\n                if (this.schemeType === Solver.SCHEME_TYPES.FORWARD_EULER) {\n                    this.nextState[y][x] = this.clamp_zero_one(current * this.coeff);\n                } else {\n                    this.nextState[y][x] = this.clamp_zero_one(current * this.coeff);\n                }\n            }\n        }\n\n        [this.currentState, this.nextState] = [this.nextState, this.currentState];\n\n        return this.denormalizeToImageData(this.currentState);\n    }\n\n    applyBoundaryConditions() {\n        const { width, height } = this;\n\n        switch (this.boundaryType.toLowerCase()) {\n            // BORDES PERIÓDICOS\n            case Solver.BOUNDARY_TYPES.PERIODIC:\n                for (let y = 0; y < height; y++) {\n                    this.nextState[y][0] = this.nextState[y][width - 2];\n                    this.nextState[y][width - 1] = this.nextState[y][1];\n                }\n                for (let x = 0; x < width; x++) {\n                    this.nextState[0][x] = this.nextState[height - 2][x];\n                    this.nextState[height - 1][x] = this.nextState[1][x];\n                }\n                break;\n\n            // BORDES DIRICHLET: valores fijos originales (en concreto, aquí decimos que sea el borde de la condición inicial)\n            case Solver.BOUNDARY_TYPES.DIRICHLET:\n                const fixedValue = 0.5;\n                for (let y = 0; y < height; y++) {\n                    this.nextState[y][0] = fixedValue;\n                    this.nextState[y][width - 1] = fixedValue;\n                }\n                for (let x = 0; x < width; x++) {\n                    this.nextState[0][x] = fixedValue;\n                    this.nextState[height - 1][x] = fixedValue;\n                }\n                break;\n\n            // BORDES EN CERO (caso especial de Dirichlet con valor 0)\n            case Solver.BOUNDARY_TYPES.ZERO:\n                for (let y = 0; y < height; y++) {\n                    this.nextState[y][0] = 0.0;\n                    this.nextState[y][width - 1] = 0.0;\n                }\n                for (let x = 0; x < width; x++) {\n                    this.nextState[0][x] = 0.0;\n                    this.nextState[height - 1][x] = 0.0;\n                }\n                break;\n\n            // BORDES FIXED: valor fijo constante (es Dirichlet, pero con valores fijos para todo el borde)\n            case Solver.BOUNDARY_TYPES.FIXED:\n                for (let y = 0; y < height; y++) {\n                    this.nextState[y][0] = this.originalState[y][0];\n                    this.nextState[y][width - 1] = this.originalState[y][width - 1];\n                }\n                for (let x = 0; x < width; x++) {\n                    this.nextState[0][x] = this.originalState[0][x];\n                    this.nextState[height - 1][x] = this.originalState[height - 1][x];\n                }\n                break;\n\n            case Solver.BOUNDARY_TYPES.NEUMANN:\n                // Derivada normal constante: ∂u/∂n = du_dn\n                const du_dn = 1.0;\n\n                for (let y = 0; y < height; y++) {\n                    // Borde izquierdo (x = 0): u[0] = u[1] - dx * du_dn\n                    this.nextState[y][0] = this.nextState[y][1] - this.deltaPx * du_dn;\n\n                    // Borde derecho (x = width - 1): u[N-1] = u[N-2] + dx * du_dn\n                    this.nextState[y][width - 1] = this.nextState[y][width - 2] + this.deltaPx * du_dn;\n                }\n\n                for (let x = 0; x < width; x++) {\n                    // Borde superior (y = 0): u[0] = u[1] - dy * du_dn\n                    this.nextState[0][x] = this.nextState[1][x] - this.deltaPx * du_dn;\n\n                    // Borde inferior (y = height - 1): u[N-1] = u[N-2] + dy * du_dn\n                    this.nextState[height - 1][x] = this.nextState[height - 2][x] + this.deltaPx * du_dn;\n                }\n                break;\n\n            case Solver.BOUNDARY_TYPES.REFLECTIVE:\n                // Caso especial de Neumann con ∂u/∂n=0 (conservación de energía)\n                for (let y = 0; y < height; y++) {\n                    this.nextState[y][0] = this.nextState[y][1];\n                    this.nextState[y][width - 1] = this.nextState[y][width - 2];\n                }\n                for (let x = 0; x < width; x++) {\n                    this.nextState[0][x] = this.nextState[1][x];\n                    this.nextState[height - 1][x] = this.nextState[height - 2][x];\n                }\n                break;\n\n            case Solver.BOUNDARY_TYPES.ROBIN:\n                // Condición mixta: αu + β∂u/∂n = γ\n                const alpha = 1.0;\n                const beta = 1.0;\n                const gamma = 0.0;\n\n                for (let y = 0; y < height; y++) {\n                    // Borde izquierdo (x = 0)\n                    this.nextState[y][0] = (beta * this.nextState[y][1] + gamma) / (beta + alpha);\n\n                    // Borde derecho (x = width - 1)\n                    this.nextState[y][width - 1] = (beta * this.nextState[y][width - 2] + gamma) / (beta + alpha);\n                }\n\n                for (let x = 0; x < width; x++) {\n                    // Borde superior (y = 0)\n                    this.nextState[0][x] = (beta * this.nextState[1][x] + gamma) / (beta + alpha);\n\n                    // Borde inferior (y = height - 1)\n                    this.nextState[height - 1][x] = (beta * this.nextState[height - 2][x] + gamma) / (beta + alpha);\n                }\n                break;\n\n            // case Solver.BOUNDARY_TYPES.MIXED:\n            //     //...\n            //     break;\n\n            // case Solver.BOUNDARY_TYPES.CAUCHY:\n            //     //...\n            //     break;\n\n            default:\n                console.warn(`Tipo de condición de frontera no reconocido: ${this.boundaryType}. Usando periódica por defecto.`);\n                // Bordes periódicos por defecto\n                for (let y = 0; y < height; y++) {\n                    this.nextState[y][0] = this.nextState[y][width - 2];\n                    this.nextState[y][width - 1] = this.nextState[y][1];\n                }\n                for (let x = 0; x < width; x++) {\n                    this.nextState[0][x] = this.nextState[height - 2][x];\n                    this.nextState[height - 1][x] = this.nextState[1][x];\n                }\n                break;\n        }\n    }\n\n    setBoundaryType(newBoundaryType) {\n        if (Object.values(Solver.BOUNDARY_TYPES).includes(newBoundaryType)) {\n            this.boundaryType = newBoundaryType;\n\n            // Si es FIXED, se necesita guardar el estado actual como el original\n            if (this.boundaryType === Solver.BOUNDARY_TYPES.FIXED) {\n                this.originalState = this.deepCopyMatrix(this.currentState);\n            }\n        } else {\n            console.warn(`Tipo de condición de frontera no válido: ${newBoundaryType}`);\n        }\n    }\n\n    setPDEType(newPdeType) {\n        if (Object.values(Solver.PDE_TYPES).includes(newPdeType)) {\n            this.pdeType = newPdeType;\n            this.calculateCoefficient(); // Recalcular coeficiente\n        } else {\n            console.warn(`Tipo de PDE no válido: ${newPdeType}`);\n        }\n    }\n\n    setSchemeType(newSchemeType) {\n        if (Object.values(Solver.SCHEME_TYPES).includes(newSchemeType)) {\n            this.schemeType = newSchemeType;\n        } else {\n            console.warn(`Tipo de esquema no válido: ${newSchemeType}`);\n        }\n    }\n\n    calculateCoefficient() {\n        // Asumiendo deltaPx == deltaX = deltaY\n        switch (this.pdeType) {\n            case Solver.PDE_TYPES.HEAT:\n            {\n                this.coeff = (this.c * this.dt) / (this.deltaPx * this.deltaPx); // Para ecuación de calor\n                break;                    \n            }\n\n            case Solver.PDE_TYPES.WAVE:\n            {\n                this.coeff = (this.c * this.dt / this.deltaPx) ** 2; // Para ecuación de onda\n                break;\n            }\n\n            case Solver.PDE_TYPES.EXPONENTIAL_DECAY:\n            {\n                if (this.schemeType === Solver.SCHEME_TYPES.FORWARD_EULER) {\n                    // Forward Euler: u^{n+1} = u^n + dt * f(u^n, t^n) <=> u^{n+1} = u^n - dt * λ * u^n\n                    this.coeff = 1 - this.lambda * this.dt;      \n                } else {\n                    // Backward Euler: u^{n+1} = u^n + dt * f(u^{n+1}, t^{n+1}) <=>  u^{n+1} = u^n / (1 + dt * λ)\n                    this.coeff = 1 / (1 + this.lambda * this.dt); \n                }\n                break;\n            }\n\n            default:\n                throw new Error('Tipo de PDE no soportado');\n        }\n    }\n\n    denormalizeToImageData(matrix) {\n        const newImageData = new ImageData(this.width, this.height);\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const idx = (y * this.width + x) * 4;\n                const value = Math.round(matrix[y][x] * 255);\n                // Asignar el mismo valor a R, G, B (escala de grises)\n                newImageData.data[idx] = value;     // R\n                newImageData.data[idx + 1] = value; // G\n                newImageData.data[idx + 2] = value; // B\n                newImageData.data[idx + 3] = 255;   // Alpha (totalmente opaco)\n            }\n        }\n        return newImageData;\n    }\n\n    createZeroMatrix() {\n        return Array.from({ length: this.height }, () => Array(this.width).fill(0));\n    }\n\n    cloneImageData(imageData) {\n        const canvas = document.createElement('canvas');\n        canvas.width = imageData.width;\n        canvas.height = imageData.height;\n        const ctx = canvas.getContext('2d');\n        ctx.putImageData(imageData, 0, 0);\n        return ctx.getImageData(0, 0, canvas.width, canvas.height);\n    }\n\n    deepCopyMatrix(matrix) {\n        return matrix.map(row => row.slice());\n    }\n\n    // Clamping estricto tras cada iteración\n    clamp_zero_one(value) {\n        return Math.max(0, Math.min(1, value));\n    }\n\n    // Volver a condiciones iniciales\n    reset() {\n        this.currentState = this.deepCopyMatrix(this.normalizeImageData(this.imageData));  // u_k = u_0\n        this.previousState = this.deepCopyMatrix(this.currentState); // u_prev = u_k\n        this.nextState = this.createZeroMatrix();\n    }\n}","import * as THREE from 'three';\n\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { preprocessImageToGrayscale } from './helpers/image-preprocessor.js';\nimport { getHeightMapFromImageData, createHeightMesh } from './helpers/image-mesh-converter.js';\nimport { Solver } from './solver.js';\nimport { colors255, applyColormap, applyOriginalLabColormapToImage, applyOriginalLabColormapToImageFullRes, labToRgb } from './helpers/color-maps.js'\n\n// Variables globales\nlet runSimulation = false;\nlet solver;\nlet originalImageData; // u_0\nlet Nx = 256, Ny = 256;\nlet meshGeometry; // Dónde están los vértices de tu superficie 3D que representan la altura de cada píxel\nlet positionAttribute; // Buffer (que el solver utiliza) que guarda los coordenadas (x, y, z) de cada vértice \nlet currentImageData; // Imagen en cada paso, que se muestra en canvas2d\nlet needToUpdate = false; \nlet meshGroup; // Mesh + wireframe\nlet toggledE = false; // Modo pantalla pseudo-completa con la tecla E\nlet currentColormapId = 'graymap'\nlet originalWidth, originalHeight;\nlet originalL = null;\nlet originala = null;\nlet originalb = null;\nlet originalR = null;\nlet originalG = null;\nlet originalB_ = null;\nlet normalizeHeights = false; // Normalización de la altura de la malla en cada paso (efecto visual)\nlet lastTime = 0;\nlet speedAnimation = 50;\n\n// Enlaczar elementos UI\nconst wireframeCheck = document.getElementById(\"wireframe-check\");\nconst meshCheck = document.getElementById(\"mesh-check\");\nconst runCheck = document.getElementById(\"run-check\");\nconst canvas3dContainer = document.getElementById('canvas3d-container');\nconst originalZ = window.getComputedStyle(canvas3dContainer).zIndex || '0';\nconst fileUpload = document.getElementById('file-upload');\nconst boundarySelect = document.getElementById(\"boundary-select\");\nconst pdeSelect = document.getElementById(\"pde-select\");\nconst schemeSelect = document.getElementById(\"scheme-select\");\nconst colormapSelect = document.getElementById(\"colormap-select\");\nconst resetButton = document.getElementById(\"reset-button\");\nconst velocitySlider = document.getElementById('speed-slider');\nconst velocityValue = document.getElementById('velocity-value');\n\n// Configuración canvas 2D\nconst canvas2d = document.getElementById(\"canvas2d\");\nconst ctx2d = canvas2d.getContext(\"2d\");\n\n// Configuración del canvas de Three.js\nconst scene = new THREE.Scene();\nscene.background = new THREE.Color(0x121212);\n\n// Configurar luz \nconst light = new THREE.DirectionalLight(0xffffff, 0.75);\nlight.position.set(0, 5, 0);\nscene.add(light);\nconst light2 = new THREE.DirectionalLight(0xffffff, 0.5);\nlight2.position.set(0, -5, 0);\nscene.add(light2);\n\n// Configuración inicial de cámara\nconst camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);\ncamera.position.set(5, 7.5, 5);\n\n// Configurar el renderer WebGL con nuestro canvas\nconst canvas3d = document.getElementById(\"canvas3d\");\nconst renderer = new THREE.WebGLRenderer({ antialias: true, canvas: canvas3d });\nrenderer.setPixelRatio(window.devicePixelRatio);\nrenderer.setSize(window.innerWidth, window.innerHeight);\n\n// Configurar control de la cámara\nconst controls = new OrbitControls(camera, renderer.domElement);\ncontrols.enableDamping = true; // movimiento suave\ncontrols.dampingFactor = 0.15;\n\n// Configurar ejes del mundo personalizados\nconst axes = createAxes();\nscene.add(axes.x);\nscene.add(axes.y);\nscene.add(axes.z);\n\n// Cargar imagen 2D por defecto de public/ o crear imagen 2D de muestra sintética\n{\n    // img = new Image();\n    // img.src = 'public/images/lena_rgb.webp';\n    // img.onload = () => { // Esperar a que se cargue imagen para continuar\n    //     originalImageData = preprocessImageToGrayscale(img);\n    //     currentImageData = originalImageData;\n    //     initializeSimulation();\n    // };\n}\n{\n    originalWidth = Nx;\n    originalHeight = Ny;\n    originalImageData = createSampleImage();\n    currentImageData = originalImageData;\n\n    const totalPixels = Nx * Ny;\n    originalL = currentImageData;\n    originala = new Float32Array(totalPixels).fill(0);\n    originalb = new Float32Array(totalPixels).fill(0);\n    originalR = new Float32Array(totalPixels);\n    originalG = new Float32Array(totalPixels);\n    originalB_ = new Float32Array(totalPixels);\n    const data = originalImageData.data;\n    for (let i = 0; i < totalPixels; i++) {\n        originalR[i] = data[i * 4];\n        originalG[i] = data[i * 4 + 1];\n        originalB_[i] = data[i * 4 + 2];\n    }\n    initializeSimulation();\n}\n\n// Usar Stats.js para mostrar los FPS y modifica directamente en inline el estilo\nconst stats = new Stats();\nstats.showPanel(0); // 0 = FPS, 1 = ms, 2 = MB, 3 = custom\nstats.dom.style.position = 'fixed';\nstats.dom.style.left = 'auto';    \nstats.dom.style.top = 'auto';   \nstats.dom.style.right = '0px';   \nstats.dom.style.bottom = '0px';  \nstats.dom.classList.add('stats');\ndocument.body.appendChild(stats.dom);\n\n// Bucle de animación principal, que se llama continuamente gracias a requestAnimationFram, que pide que se \n// ejecute la función que se le pase antes del siguiente repintado de pantalla.\nfunction animate(time = 0) {\n    stats.begin();\n\n    controls.update();\n\n    const thresholdToHighSpeed = 50;\n    if (runSimulation && solver) {\n        if (speedAnimation === 0) {\n            // No avanza la simulación\n        } else if (speedAnimation <= thresholdToHighSpeed) {\n            // Más lento, ejecuta cada cierto tiempo\n            // Intervalo entre pasos: de 1000 ms (speed=1) a 20 ms (speed=thresholdToHighSpeed)\n            const maxInterval = 1000;\n            const minInterval = 20;\n            const interval = maxInterval - ((speedAnimation - 1) / (thresholdToHighSpeed - 1)) * (maxInterval - minInterval);\n            \n            if (time - lastTime > interval) {\n                currentImageData = solver.step();\n                updateVisuals(currentImageData);\n                needToUpdate = true;\n                lastTime = time;\n            }\n        } else {\n            // Más rápido, ejecuta varios pasos por frame\n            // stepsPerFrame: de 1 (speed=thresholdToHighSpeed) a 10 (speed=100)\n            const minSteps = 1;\n            const maxSteps = 10;\n            const stepsPerFrame = Math.round(minSteps + ((speedAnimation - (thresholdToHighSpeed + 1)) / (thresholdToHighSpeed - 1)) * (maxSteps - minSteps));\n            \n            for (let i = 0; i < stepsPerFrame; i++) {\n                currentImageData = solver.step();\n            }\n            updateVisuals(currentImageData);\n            needToUpdate = true;\n        }\n    }\n\n    if (needToUpdate) {\n        positionAttribute.needsUpdate = true;\n        meshGeometry.computeVertexNormals();\n        needToUpdate = false;\n    }\n\n    renderer.render(scene, camera);\n\n    stats.end();\n\n    requestAnimationFrame(animate);\n}\n\nanimate();\n\n// Event listeners\nwindow.addEventListener('resize', handleResize);\nwireframeCheck.addEventListener(\"change\", toggleWireframe);\nmeshCheck.addEventListener(\"change\", toggleMesh);\nrunCheck.addEventListener(\"change\", toggleRun);\nfileUpload.addEventListener('change', handleImageUpload);\nboundarySelect.addEventListener(\"change\", handleBoundaryChange);\npdeSelect.addEventListener(\"change\", handlePDEChange);\nschemeSelect.addEventListener(\"change\", handleSchemeChange);\ncolormapSelect.addEventListener(\"change\", handleColormapChange);\nresetButton.addEventListener(\"click\", setInitialCondition);\nvelocitySlider.addEventListener(\"input\", setVelocity);\n\n// Helper functions\nfunction initializeSimulation() {\n    // Disparar los eventos para inializar el sistema\n    // wireframeCheck.dispatchEvent(new Event('change'));\n    meshCheck.dispatchEvent(new Event('change'));\n    runCheck.dispatchEvent(new Event('change'));\n\n    solver = new Solver({\n        imageData: currentImageData,\n        deltaPx: 1.0, // deltaPx == deltaX = deltaY\n        dt: 0.005,\n        pdeType: document.getElementById('pde-select').value || 'heat',\n        boundaryType: document.getElementById('boundary-select').value || 'reflective',\n        schemeType: document.getElementById('scheme-select').value || 'forward-euler'\n    });\n\n    updateVisuals(currentImageData);\n}\n\n// Cargar textura de ejemplo\nfunction createSampleImage() {\n    const canvas = document.createElement('canvas');\n    canvas.width = Nx;\n    canvas.height = Ny;\n    \n    // Usar el contexto del canvas temporal, no el global ctx2d\n    const ctx = canvas.getContext('2d');\n    \n    // Fondo degradado\n    const gradient = ctx.createRadialGradient(Nx / 2, Ny / 2, 0, Nx / 2, Ny / 2, Nx / 2);\n    gradient.addColorStop(0, '#444');\n    gradient.addColorStop(1, '#111');\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, Nx, Ny);\n\n    // Patrón de prueba\n    ctx.strokeStyle = '#aaa';\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    ctx.arc(Nx / 2, Ny / 2, Nx / 3, 0, Math.PI * 2);\n    ctx.stroke();\n\n    ctx.beginPath();\n    ctx.moveTo(10, 10);\n    ctx.lineTo(Nx - 10, Ny - 10);\n    ctx.moveTo(Nx - 10, 10);\n    ctx.lineTo(10, Ny - 10);\n    ctx.stroke();\n\n    return ctx.getImageData(0, 0, Nx, Ny);\n}\n\n// Actualizar tanto canvas2d (imagen) y canvas3d (heightmap/malla)\nfunction updateVisuals(imageData) {\n    // Generar heightmap y actualizar malla 3D\n    const heightMapFlat = getHeightMapFromImageData(imageData, Nx, Ny);\n\n    // Aplicar colormap SOLO para visualización y actualizar canvas 2D con imagen coloreada\n    if (currentColormapId === 'constant-color') { \n        // Construir ImageData con RGB original\n        const totalPixels = originalWidth * originalHeight;\n        const imgDataArray = new Uint8ClampedArray(totalPixels * 4);\n        for (let i = 0; i < totalPixels; i++) {\n            imgDataArray[i * 4] = originalR[i];\n            imgDataArray[i * 4 + 1] = originalG[i];\n            imgDataArray[i * 4 + 2] = originalB_[i];\n            imgDataArray[i * 4 + 3] = 255;\n        }\n        const originalRGBImageData = new ImageData(imgDataArray, originalWidth, originalHeight);\n        updateCanvas2D(originalRGBImageData);\n    } else {\n        const coloredImageData = currentColormapId === 'constant-chrominance'\n            ? applyOriginalLabColormapToImage(imageData, originala, originalb, originalWidth, originalHeight)\n            : applyColormap(imageData, currentColormapId);\n        updateCanvas2D(coloredImageData);\n    }\n\n    if (!meshGroup) {\n        // Crear malla por primera vez\n        meshGroup = createHeightMesh(heightMapFlat, Nx, Ny, false, 1, false, false);\n        scene.add(meshGroup);\n        const mesh = meshGroup.getObjectByName('mesh');\n        if (mesh) mesh.visible = meshCheck.checked; \n        meshGeometry = mesh.geometry;\n        positionAttribute = meshGeometry.attributes.position;\n        const wireframe = meshGroup.getObjectByName(\"wireframe\"); // Configurar wireframe inicial\n        if (wireframe) wireframe.visible = wireframeCheck.checked;\n    } else {\n        // Actualizar malla existente (incluyendo wireframe)\n        updateMeshGeometry(heightMapFlat);\n    }\n\n    // Actualizar colores (DESPUÉS de haber computado las altura con la imagen en gris, \n    // que es en la que se resuelve la PDE) de vértices para la malla 3D\n    updateMeshColors(heightMapFlat, currentColormapId);\n}\n\nfunction updateMeshGeometry(heightMapFlat) {\n    const posArr = positionAttribute.array;\n\n    if (posArr.length !== Nx * Ny * 3) {\n        console.error(\"Tamaño de los datos no coincide con la geometría.\");\n        return;\n    }\n\n    if (normalizeHeights) {\n        // Cálculo de rango dinámico (sin percentiles... ver createHeightMesh())\n        let min, max, range;\n        min = Math.min(...heightMapFlat);\n        max = Math.max(...heightMapFlat);\n        range = max - min || 1; // Evitar división por cero\n\n        // Actualizar directamente la componente Z (altura) en el array con normalización\n        for (let j = 0; j < Ny; j++) {\n            for (let i = 0; i < Nx; i++) {\n                const index = j * Nx + i;\n                const arrayIndex = index * 3;\n                const normalizedHeight = (heightMapFlat[index] - min) / range;\n                const height = normalizedHeight * 1.0;\n                posArr[arrayIndex + 2] = height;\n            }\n        }\n    } else {\n        // Actualizar directamente la componente Z (altura) en el array sin normalización\n        for (let j = 0; j < Ny; j++) {\n            for (let i = 0; i < Nx; i++) {\n                const index = j * Nx + i;\n                const arrayIndex = index * 3;\n                posArr[arrayIndex + 2] = heightMapFlat[index];\n            }\n        }\n    }\n\n    meshGeometry.computeVertexNormals();\n\n    // Actualizar wireframe\n    const wireframe = meshGroup.getObjectByName(\"wireframe\");\n    if (wireframe) {\n        wireframe.geometry.attributes.position.copy(positionAttribute);\n        wireframe.geometry.attributes.position.needsUpdate = true;\n        wireframe.geometry.computeVertexNormals();\n    }\n\n    needToUpdate = true;\n}\n\nfunction updateCanvas2D(imageData) {\n    const w = imageData.width;\n    const h = imageData.height;\n    canvas2d.width = w;\n    canvas2d.height = h;\n    ctx2d.putImageData(imageData, 0, 0);\n}\n\nfunction updateMeshColors(heightMapFlat, colormapId) {\n    if (!meshGeometry || !meshGeometry.attributes.color) return;\n    \n    if (!meshGeometry.attributes.color) { // Si no existe el atributo color, lo creamos\n        const colors = new Float32Array(Nx * Ny * 3);\n        meshGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\n    }\n\n    const colorAttribute = meshGeometry.attributes.color;\n    const colorArr = colorAttribute.array;\n\n    if (colormapId === 'constant-color' || colormapId === 'constant-chrominance') {\n        for (let j = 0; j < Ny; j++) {\n            for (let i = 0; i < Nx; i++) {\n                const meshIndex = j * Nx + i;\n                const arrayIndex = meshIndex * 3;   // Índice para la malla, de tamaño NxxNy\n\n                // Calcular posición relativa en la imagen original\n                const relX = i / (Nx - 1);\n                const relY = j / (Ny - 1);\n                \n                // Mapear a coordenadas de la imagen original, de tamaño originalWidthxoriginalHeight\n                const origX = Math.floor(relX * (originalWidth - 1));\n                const origY = Math.floor(relY * (originalHeight - 1));\n                const origIndex = origY * originalWidth + origX;\n\n                if (colormapId === 'constant-color') {\n                    // A Three.js se le pasan colores en [0, 1]\n                    colorArr[arrayIndex] = originalR[origIndex] / 255.0;\n                    colorArr[arrayIndex + 1] = originalG[origIndex] / 255.0;\n                    colorArr[arrayIndex + 2] = originalB_[origIndex] / 255.0;\n                } else {\n                    const heightValue = heightMapFlat[meshIndex];\n                    const L_val = heightValue * 100.0; // L en [0, 100]\n                    const a_val = originala ? originala[origIndex] : 0;\n                    const b_val = originalb ? originalb[origIndex] : 0;\n                    const [r, g, b] = labToRgb(L_val, a_val, b_val);\n                    colorArr[arrayIndex] = r;\n                    colorArr[arrayIndex + 1] = g;\n                    colorArr[arrayIndex + 2] = b;\n                }\n            }\n        }\n    } else {\n        // Resto de colormaps \n        const colormap = colors255[colormapId];\n        for (let j = 0; j < Ny; j++) {\n            for (let i = 0; i < Nx; i++) {\n                const index = j * Nx + i;\n                const arrayIndex = index * 3;\n                const heightValue = heightMapFlat[index]; // Valor en [0, 1]\n\n                // Convertir a índice de colormap [0, 255]\n                const colorIndex = Math.min(255, Math.max(0, Math.floor(heightValue * 255)));\n\n                // Colorear el vértice\n                const color = colormap[colorIndex];\n                colorArr[arrayIndex] = color[0];     // R\n                colorArr[arrayIndex + 1] = color[1]; // G\n                colorArr[arrayIndex + 2] = color[2]; // B\n            }\n        }\n    }\n    \n    colorAttribute.needsUpdate = true;\n}\n\nfunction createAxes() {\n    const materialX = new THREE.LineBasicMaterial({ color: 0xff0000 });\n    const materialY = new THREE.LineBasicMaterial({ color: 0x00ff00 });\n    const materialZ = new THREE.LineBasicMaterial({ color: 0x0000ff });\n\n    const geometryX = new THREE.BufferGeometry().setFromPoints([\n        new THREE.Vector3(0, 0, 0),\n        new THREE.Vector3(5, 0, 0)\n    ]);\n    const xAxis = new THREE.Line(geometryX, materialX);\n\n    const geometryY = new THREE.BufferGeometry().setFromPoints([\n        new THREE.Vector3(0, 0, 0),\n        new THREE.Vector3(0, 2.5, 0)\n    ]);\n    const yAxis = new THREE.Line(geometryY, materialY);\n\n    const geometryZ = new THREE.BufferGeometry().setFromPoints([\n        new THREE.Vector3(0, 0, 0),\n        new THREE.Vector3(0, 0, 5)\n    ]);\n    const zAxis = new THREE.Line(geometryZ, materialZ);\n\n    return { x: xAxis, y: yAxis, z: zAxis };\n}\n\nfunction toggleWireframe(event) {\n    const wireframe = meshGroup?.getObjectByName(\"wireframe\");\n    if (wireframe) {\n        wireframe.visible = event.target.checked;\n    }\n}\n\nfunction toggleMesh(event) {\n    const mesh = meshGroup?.getObjectByName(\"mesh\");\n    if (mesh) {\n        mesh.visible = event.target.checked;\n    }\n}\n\nfunction toggleRun(event) {\n    runSimulation = event.target.checked;\n}\n\nfunction handleResize() {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n}\n\nfunction handleImageUpload(event) {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    const reader = new FileReader();\n\n    reader.onload = function(e) {\n        const imgElement = new Image();\n        imgElement.onload = () => {\n            // Guardar dimensiones ORIGINALES\n            originalWidth = imgElement.width;\n            originalHeight = imgElement.height;\n\n            const { imageData, LData, aData, bData } = preprocessImageToGrayscale(imgElement, Nx, Ny);\n            originalImageData = imageData;\n\n            originalL = LData;\n            originala = aData;\n            originalb = bData;\n\n            const canvas = document.createElement('canvas');\n            const ctx = canvas.getContext('2d'); \n            canvas.width = originalWidth;  \n            canvas.height = originalHeight; \n            ctx.drawImage(imgElement, 0, 0, canvas.width, canvas.height);\n            const originalRGB = ctx.getImageData(0, 0, canvas.width, canvas.height);\n            const totalPixels = originalWidth * originalHeight;\n            originalR = new Float32Array(totalPixels);\n            originalG = new Float32Array(totalPixels);\n            originalB_ = new Float32Array(totalPixels);\n            for (let i = 0; i < totalPixels; i++) {\n                originalR[i] = originalRGB.data[i * 4];      \n                originalG[i] = originalRGB.data[i * 4 + 1];\n                originalB_[i] = originalRGB.data[i * 4 + 2];\n            }\n\n            currentImageData = originalImageData;\n            initializeSimulation();\n        };\n        imgElement.src = e.target.result;\n    };\n\n    reader.readAsDataURL(file);\n}\n\nfunction handleBoundaryChange(event) {\n    if (solver) {\n        solver.setBoundaryType(event.target.value);\n    }\n}\n\nfunction handlePDEChange(event) {\n    if (solver) {\n        solver.setPDEType(event.target.value);\n    }\n\n    updateEquationDisplay(event.target.value);\n}\n\nfunction handleSchemeChange(event) {\n    if (solver) {\n        solver.setSchemeType(event.target.value);\n    }\n}\n\nfunction handleColormapChange(event) {\n    currentColormapId = event.target.value;\n    updateVisuals(currentImageData);\n}\n\nfunction setVelocity(event) {\n    const value = event.target.value;\n    velocityValue.textContent = speedAnimation = value;\n}\n\nfunction setInitialCondition() {\n    // Restaurar imagen y solver\n    currentImageData = originalImageData;\n\n    if (solver) {\n        solver.reset();\n    }\n\n    // Eliminar la malla anterior para evitar problemas\n    if (meshGroup) {\n        scene.remove(meshGroup);\n        meshGroup.geometry?.dispose();\n        meshGroup.material?.dispose();\n        meshGroup = null;\n        meshGeometry = null;\n        positionAttribute = null;\n    }\n\n    initializeSimulation();\n}\n\nfunction updateEquationDisplay(pdeType) {\n    const equationSection = document.getElementById('equations-section');\n    \n    if (pdeType === 'heat') {\n        equationSection.innerHTML = `\n            <h2>Current PDE</h2>\n            <p>\n                $$ \\\\frac{\\\\partial u}{\\\\partial t} = \\\\alpha \\\\nabla^2 u $$\n            </p>\n        `;\n    } else if (pdeType === 'exponential-decay') {\n        equationSection.innerHTML = `\n            <h2>Current PDE</h2>\n            <p>\n                $$ \\\\frac{\\\\partial u}{\\\\partial t} = -\\\\lambda u $$\n            </p>\n        `;\n    } else {\n        equationSection.innerHTML = `\n            <h2>Current PDE</h2>\n            <p>\n                $$ \\\\frac{\\\\partial^2 u}{\\\\partial t^2} = c^2 \\\\nabla^2 u $$\n            </p>\n        `;\n    }\n    \n    // Volver a renderizar MathJax\n    MathJax.typesetPromise();\n}\n\nfunction saveImage() {\n    // Crear un canvas temporal con el tamaño original de canvas2d\n    const tempCanvas = document.createElement('canvas');\n    tempCanvas.width = originalWidth;\n    tempCanvas.height = originalHeight;\n    const tempCtx = tempCanvas.getContext('2d');\n\n    \n    // Generar los datos de imagen según el colormap actual\n    if (currentColormapId === 'constant-color') {\n        // Construir ImageData con RGB original\n        const imgDataArray = new Uint8ClampedArray(originalWidth * originalHeight * 4);\n        for (let i = 0; i < originalWidth * originalHeight; i++) {\n            imgDataArray[i * 4] = originalR[i];\n            imgDataArray[i * 4 + 1] = originalG[i];\n            imgDataArray[i * 4 + 2] = originalB_[i];\n            imgDataArray[i * 4 + 3] = 255;\n        }\n        const originalRGBImageData = new ImageData(imgDataArray, originalWidth, originalHeight);\n        tempCtx.putImageData(originalRGBImageData, 0, 0);\n    } \n    else if (currentColormapId === 'constant-chrominance') {\n        // Obtener heightmap actual\n        const heightMapFlat = getHeightMapFromImageData(currentImageData, Nx, Ny);\n        \n        // Generar imagen Lab a resolución original\n        const labImageData = applyOriginalLabColormapToImageFullRes(\n            heightMapFlat, \n            originala, \n            originalb, \n            originalWidth, \n            originalHeight,\n            Nx,\n            Ny\n        );\n        tempCtx.putImageData(labImageData, 0, 0);\n    } \n    else {\n        // Para otros colormaps, escalamos la imagen actual a la resolución original\n        const coloredImageData = applyColormap(currentImageData, currentColormapId);\n        \n        // Crear un canvas temporal para el escalado\n        const tempCanvas2 = document.createElement('canvas');\n        tempCanvas2.width = currentImageData.width;\n        tempCanvas2.height = currentImageData.height;\n        const tempCtx2 = tempCanvas2.getContext('2d');\n        tempCtx2.putImageData(coloredImageData, 0, 0);\n        \n        // Dibujar escalado al tamaño original\n        tempCtx.drawImage(tempCanvas2, 0, 0, originalWidth, originalHeight);\n    }   \n\n    let filename = prompt('Enter the file name (without extension):', `image_${tempCanvas.width}x${tempCanvas.height}`);\n    if (!filename) return;\n\n    // Generar el data URL del canvas\n    const ext = 'png';\n    const mimeType = 'image/png';\n    tempCanvas.toBlob((blob) => {\n        if (!blob) {\n            alert('Error generating image.');\n            return;\n        }\n\n        // Crear enlace temporal para descarga\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `${filename}.${ext}`;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n    }, mimeType);\n}\n\n// Volver a valores por defecto iniciales de los checkbox al recargar la página\nwindow.addEventListener('load', () => {\n    const checkboxes = document.querySelectorAll('input[type=\"checkbox\"]');\n    checkboxes.forEach(cb => {\n        cb.checked = cb.defaultChecked;\n    });\n\n    wireframeCheck.dispatchEvent(new Event('change'));\n    meshCheck.dispatchEvent(new Event('change'));\n    runCheck.dispatchEvent(new Event('change'));\n\n    fileUpload.value = '';\n\n    document.getElementById('colormap-select').value = 'graymap';\n    document.getElementById('pde-select').value = 'wave';\n    document.getElementById('boundary-select').value = 'reflective';\n    document.getElementById('scheme-select').value = 'forward-euler';\n    document.getElementById('speed-slider').value = 50;\n});\n\nwindow.addEventListener('keydown', (event) => {\nconst key = event.key.toLowerCase();\n\n  if (key === 'e') {\n    toggledE = !toggledE;\n\n    if (toggledE) {\n      // Modo pantalla completa 3D\n      canvas3dContainer.style.position = 'fixed';\n      canvas3dContainer.style.top = '0';\n      canvas3dContainer.style.left = '0';\n      canvas3dContainer.style.width = '100vw';\n      canvas3dContainer.style.height = '100vh';\n      canvas3dContainer.style.zIndex = '9999';\n\n      // Ocultar todo lo demás\n      document.getElementById('main-container').style.display = 'none';\n      document.getElementById('canvas2d-section').style.display = 'none';\n    } else {\n      // Volver a modo normal\n      canvas3dContainer.style.position = '';\n      canvas3dContainer.style.top = '';\n      canvas3dContainer.style.left = '';\n      canvas3dContainer.style.width = '';\n      canvas3dContainer.style.height = '';\n      canvas3dContainer.style.zIndex = originalZ;\n\n      document.getElementById('main-container').style.display = '';\n      document.getElementById('canvas2d-section').style.display = '';\n    }\n\n    axes.x.visible = !axes.x.visible;\n    axes.y.visible = !axes.y.visible;\n    axes.z.visible = !axes.z.visible;\n  }\n\n  if (key === 'r') {\n    runCheck.click();\n  }\n  \n  if (key === 's') {\n    saveImage();\n  }\n  \n    if (key === 'n') {\n    normalizeHeights = !normalizeHeights;\n\n    const indicator = document.getElementById('normalization-indicator');\n    if (normalizeHeights) {\n        indicator.style.display = 'block';\n    } else {\n        indicator.style.display = 'none';\n    }\n    }\n\n  if (key === 'ñ') {\n    console.log(\"¡Has descubierto un easter egg! Entre tú y yo: aplica la ecuación de calor con Constant Color, condiciones Zero, y descubrirás el modo 'cojín'\");\n  }\n});\n"],"names":[],"mappings":";;;AAAA,MAAM,OAAO,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,iBAAiB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,iBAAiB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,iBAAiB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,iBAAiB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,iBAAiB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,iBAAiB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,iBAAiB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,iBAAiB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,iBAAiB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,gBAAgB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,iBAAiB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,iBAAiB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,iBAAiB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,iBAAiB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,iBAAiB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,iBAAiB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,iBAAiB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,iBAAiB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,iBAAiB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,gBAAgB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,iBAAiB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,iBAAiB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,iBAAiB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,iBAAiB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,iBAAiB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,iBAAiB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,iBAAiB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,iBAAiB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,oBAAoB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,iBAAiB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,gBAAgB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,iBAAiB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,iBAAiB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,oBAAoB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,oBAAoB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,kBAAkB,EAAE,iBAAiB,CAAC,EAAE,CAAC,mBAAmB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE,iBAAiB,CAAC,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,iBAAiB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE,iBAAiB,CAAC,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,iBAAiB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,iBAAiB,CAAC,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,mBAAmB,CAAC,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,mBAAmB,CAAC,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,oBAAoB,CAAC,EAAE,CAAC,kBAAkB,EAAE,iBAAiB,EAAE,oBAAoB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,iBAAiB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,iBAAiB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,iBAAiB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,iBAAiB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,oBAAoB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,oBAAoB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,oBAAoB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,qBAAqB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;AAC53S,MAAM,WAAW,GAAG,CAAC,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;AACr8P,MAAM,WAAW,GAAG,CAAC,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;AACx8P,MAAM,WAAW,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,mBAAmB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,mBAAmB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,mBAAmB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,mBAAmB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,mBAAmB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,mBAAmB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,mBAAmB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,mBAAmB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,mBAAmB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,oBAAoB,EAAE,oBAAoB,EAAE,GAAG,CAAC,EAAE,CAAC,mBAAmB,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,mBAAmB,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,mBAAmB,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,mBAAmB,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,mBAAmB,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,mBAAmB,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,mBAAmB,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,mBAAmB,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,mBAAmB,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,mBAAmB,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,mBAAmB,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,mBAAmB,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,mBAAmB,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,mBAAmB,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,mBAAmB,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,iBAAiB,EAAE,iBAAiB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,mBAAmB,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,mBAAmB,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,mBAAmB,EAAE,mBAAmB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,iBAAiB,EAAE,iBAAiB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,iBAAiB,EAAE,iBAAiB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,iBAAiB,EAAE,iBAAiB,CAAC,EAAE,CAAC,GAAG,EAAE,iBAAiB,EAAE,iBAAiB,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,iBAAiB,EAAE,iBAAiB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,iBAAiB,EAAE,iBAAiB,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,GAAG,EAAE,iBAAiB,EAAE,iBAAiB,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,GAAG,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,GAAG,EAAE,oBAAoB,EAAE,oBAAoB,CAAC,EAAE,CAAC,GAAG,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,GAAG,EAAE,oBAAoB,EAAE,oBAAoB,CAAC,EAAE,CAAC,GAAG,EAAE,qBAAqB,EAAE,qBAAqB,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;AAC13T,MAAM,UAAU,GAAG,CAAC,CAAC,kBAAkB,EAAE,GAAG,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,oBAAoB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,oBAAoB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,oBAAoB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,oBAAoB,EAAE,mBAAmB,CAAC,EAAE,CAAC,iBAAiB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,iBAAiB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,gBAAgB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,iBAAiB,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,iBAAiB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,kBAAkB,CAAC,EAAE,CAAC,iBAAiB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,kBAAkB,CAAC,EAAE,CAAC,iBAAiB,EAAE,mBAAmB,EAAE,iBAAiB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,kBAAkB,CAAC,EAAE,CAAC,gBAAgB,EAAE,mBAAmB,EAAE,iBAAiB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,iBAAiB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,iBAAiB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,mBAAmB,CAAC,EAAE,CAAC,iBAAiB,EAAE,kBAAkB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,mBAAmB,CAAC,EAAE,CAAC,iBAAiB,EAAE,kBAAkB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,iBAAiB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,iBAAiB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,iBAAiB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,mBAAmB,CAAC,EAAE,CAAC,iBAAiB,EAAE,kBAAkB,EAAE,iBAAiB,CAAC,EAAE,CAAC,iBAAiB,EAAE,iBAAiB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,mBAAmB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,iBAAiB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,iBAAiB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,iBAAiB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,gBAAgB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,iBAAiB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,iBAAiB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,iBAAiB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,iBAAiB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,iBAAiB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,iBAAiB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,iBAAiB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,iBAAiB,CAAC,EAAE,CAAC,iBAAiB,EAAE,iBAAiB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,iBAAiB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,iBAAiB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,iBAAiB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,iBAAiB,EAAE,kBAAkB,CAAC,EAAE,CAAC,iBAAiB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,iBAAiB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,iBAAiB,EAAE,kBAAkB,EAAE,iBAAiB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,iBAAiB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,iBAAiB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,iBAAiB,EAAE,iBAAiB,EAAE,kBAAkB,CAAC,EAAE,CAAC,gBAAgB,EAAE,iBAAiB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,iBAAiB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,iBAAiB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,iBAAiB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,iBAAiB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,iBAAiB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,iBAAiB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,gBAAgB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,gBAAgB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,iBAAiB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,iBAAiB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,iBAAiB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,iBAAiB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,kBAAkB,EAAE,iBAAiB,CAAC,EAAE,CAAC,mBAAmB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,iBAAiB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,iBAAiB,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,iBAAiB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,mBAAmB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,iBAAiB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,mBAAmB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,mBAAmB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,mBAAmB,EAAE,kBAAkB,CAAC,EAAE,CAAC,iBAAiB,EAAE,iBAAiB,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,mBAAmB,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,mBAAmB,EAAE,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,iBAAiB,CAAC,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,iBAAiB,EAAE,mBAAmB,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,EAAE,kBAAkB,EAAE,iBAAiB,CAAC,EAAE,CAAC,m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"}